{
  "version": 3,
  "sources": ["../../src/utils/Logger.ts", "../../src/utils/JwtUtils.ts", "../../src/utils/CryptoUtils.ts", "../../src/utils/Event.ts", "../../src/utils/PopupUtils.ts", "../../src/utils/Timer.ts", "../../src/utils/UrlUtils.ts", "../../src/errors/ErrorResponse.ts", "../../src/errors/ErrorTimeout.ts", "../../src/AccessTokenEvents.ts", "../../src/CheckSessionIFrame.ts", "../../src/InMemoryWebStorage.ts", "../../src/errors/ErrorDPoPNonce.ts", "../../src/JsonService.ts", "../../src/MetadataService.ts", "../../src/WebStorageStateStore.ts", "../../src/OidcClientSettings.ts", "../../src/UserInfoService.ts", "../../src/TokenClient.ts", "../../src/ResponseValidator.ts", "../../src/State.ts", "../../src/SigninState.ts", "../../src/SigninRequest.ts", "../../src/SigninResponse.ts", "../../src/SignoutRequest.ts", "../../src/SignoutResponse.ts", "../../src/ClaimsService.ts", "../../src/DPoPStore.ts", "../../src/OidcClient.ts", "../../src/SessionMonitor.ts", "../../src/User.ts", "../../src/navigators/AbstractChildWindow.ts", "../../src/UserManagerSettings.ts", "../../src/navigators/IFrameWindow.ts", "../../src/navigators/IFrameNavigator.ts", "../../src/navigators/PopupWindow.ts", "../../src/navigators/PopupNavigator.ts", "../../src/navigators/RedirectNavigator.ts", "../../src/UserManagerEvents.ts", "../../src/SilentRenewService.ts", "../../src/RefreshState.ts", "../../src/UserManager.ts", "../../package.json", "../../src/Version.ts", "../../src/IndexedDbDPoPStore.ts"],
  "sourcesContent": ["// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\n/**\r\n * Native interface\r\n *\r\n * @public\r\n */\r\nexport interface ILogger {\r\n    debug(...args: unknown[]): void;\r\n    info(...args: unknown[]): void;\r\n    warn(...args: unknown[]): void;\r\n    error(...args: unknown[]): void;\r\n}\r\n\r\nconst nopLogger: ILogger = {\r\n    debug: () => undefined,\r\n    info: () => undefined,\r\n    warn: () => undefined,\r\n    error: () => undefined,\r\n};\r\n\r\nlet level: number;\r\nlet logger: ILogger;\r\n\r\n/**\r\n * Log levels\r\n *\r\n * @public\r\n */\r\nexport enum Log {\r\n    NONE,\r\n    ERROR,\r\n    WARN,\r\n    INFO,\r\n    DEBUG\r\n}\r\n\r\n/**\r\n * Log manager\r\n *\r\n * @public\r\n */\r\nexport namespace Log { // eslint-disable-line @typescript-eslint/no-namespace\r\n    export function reset(): void {\r\n        level = Log.INFO;\r\n        logger = nopLogger;\r\n    }\r\n\r\n    export function setLevel(value: Log): void {\r\n        if (!(Log.NONE <= value && value <= Log.DEBUG)) {\r\n            throw new Error(\"Invalid log level\");\r\n        }\r\n        level = value;\r\n    }\r\n\r\n    export function setLogger(value: ILogger): void {\r\n        logger = value;\r\n    }\r\n}\r\n\r\n/**\r\n * Internal logger instance\r\n *\r\n * @public\r\n */\r\nexport class Logger {\r\n    private _method?: string;\r\n    public constructor(private _name: string) {}\r\n\r\n    /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\r\n    public debug(...args: unknown[]): void {\r\n        if (level >= Log.DEBUG) {\r\n            logger.debug(Logger._format(this._name, this._method), ...args);\r\n        }\r\n    }\r\n    public info(...args: unknown[]): void {\r\n        if (level >= Log.INFO) {\r\n            logger.info(Logger._format(this._name, this._method), ...args);\r\n        }\r\n    }\r\n    public warn(...args: unknown[]): void {\r\n        if (level >= Log.WARN) {\r\n            logger.warn(Logger._format(this._name, this._method), ...args);\r\n        }\r\n    }\r\n    public error(...args: unknown[]): void {\r\n        if (level >= Log.ERROR) {\r\n            logger.error(Logger._format(this._name, this._method), ...args);\r\n        }\r\n    }\r\n    /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */\r\n\r\n    public throw(err: Error): never {\r\n        this.error(err);\r\n        throw err;\r\n    }\r\n\r\n    public create(method: string): Logger {\r\n        const methodLogger: Logger = Object.create(this);\r\n        methodLogger._method = method;\r\n        methodLogger.debug(\"begin\");\r\n        return methodLogger;\r\n    }\r\n\r\n    public static createStatic(name: string, staticMethod: string): Logger {\r\n        const staticLogger = new Logger(`${name}.${staticMethod}`);\r\n        staticLogger.debug(\"begin\");\r\n        return staticLogger;\r\n    }\r\n\r\n    private static _format(name: string, method?: string) {\r\n        const prefix = `[${name}]`;\r\n        return method ? `${prefix} ${method}:` : prefix;\r\n    }\r\n\r\n    /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\r\n    // helpers for static class methods\r\n    public static debug(name: string, ...args: unknown[]): void {\r\n        if (level >= Log.DEBUG) {\r\n            logger.debug(Logger._format(name), ...args);\r\n        }\r\n    }\r\n    public static info(name: string, ...args: unknown[]): void {\r\n        if (level >= Log.INFO) {\r\n            logger.info(Logger._format(name), ...args);\r\n        }\r\n    }\r\n    public static warn(name: string, ...args: unknown[]): void {\r\n        if (level >= Log.WARN) {\r\n            logger.warn(Logger._format(name), ...args);\r\n        }\r\n    }\r\n    public static error(name: string, ...args: unknown[]): void {\r\n        if (level >= Log.ERROR) {\r\n            logger.error(Logger._format(name), ...args);\r\n        }\r\n    }\r\n    /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */\r\n}\r\n\r\nLog.reset();\r\n", "import { jwtDecode } from \"jwt-decode\";\r\n\r\nimport { Logger } from \"./Logger\";\r\nimport type { JwtClaims } from \"../Claims\";\r\nimport { CryptoUtils } from \"./CryptoUtils\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class JwtUtils {\r\n    // IMPORTANT: doesn't validate the token\r\n    public static decode(token: string): JwtClaims {\r\n        try {\r\n            return jwtDecode<JwtClaims>(token);\r\n        }\r\n        catch (err) {\r\n            Logger.error(\"JwtUtils.decode\", err);\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public static async generateSignedJwt(header: object, payload: object, privateKey: CryptoKey) : Promise<string> {\r\n        const encodedHeader = CryptoUtils.encodeBase64Url(new TextEncoder().encode(JSON.stringify(header)));\r\n        const encodedPayload = CryptoUtils.encodeBase64Url(new TextEncoder().encode(JSON.stringify(payload)));\r\n        const encodedToken = `${encodedHeader}.${encodedPayload}`;\r\n\r\n        const signature = await window.crypto.subtle.sign(\r\n            {\r\n                name: \"ECDSA\",\r\n                hash: { name: \"SHA-256\" },\r\n            },\r\n            privateKey,\r\n            new TextEncoder().encode(encodedToken),\r\n        );\r\n\r\n        const encodedSignature = CryptoUtils.encodeBase64Url(new Uint8Array(signature));\r\n        return `${encodedToken}.${encodedSignature}`;\r\n    }\r\n}\r\n", "import { Logger } from \"./Logger\";\r\nimport { JwtUtils } from \"./JwtUtils\";\r\n\r\nexport interface GenerateDPoPProofOpts {\r\n    url: string;\r\n    accessToken?: string;\r\n    httpMethod?: string;\r\n    keyPair: CryptoKeyPair;\r\n    nonce?: string;\r\n}\r\n\r\nconst UUID_V4_TEMPLATE = \"10000000-1000-4000-8000-100000000000\";\r\n\r\nconst toBase64 = (val: ArrayBuffer): string =>\r\n    btoa([...new Uint8Array(val)]\r\n        .map((chr) => String.fromCharCode(chr))\r\n        .join(\"\"));\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class CryptoUtils {\r\n    private static _randomWord(): number {\r\n        const arr = new Uint32Array(1);\r\n        crypto.getRandomValues(arr);\r\n        return arr[0];\r\n    }\r\n\r\n    /**\r\n     * Generates RFC4122 version 4 guid\r\n     */\r\n    public static generateUUIDv4(): string {\r\n        const uuid = UUID_V4_TEMPLATE.replace(/[018]/g, c =>\r\n            (+c ^ CryptoUtils._randomWord() & 15 >> +c / 4).toString(16),\r\n        );\r\n        return uuid.replace(/-/g, \"\");\r\n    }\r\n\r\n    /**\r\n     * PKCE: Generate a code verifier\r\n     */\r\n    public static generateCodeVerifier(): string {\r\n        return CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4();\r\n    }\r\n\r\n    /**\r\n     * PKCE: Generate a code challenge\r\n     */\r\n    public static async generateCodeChallenge(code_verifier: string): Promise<string> {\r\n        if (!crypto.subtle) {\r\n            throw new Error(\"Crypto.subtle is available only in secure contexts (HTTPS).\");\r\n        }\r\n\r\n        try {\r\n            const encoder = new TextEncoder();\r\n            const data = encoder.encode(code_verifier);\r\n            const hashed = await crypto.subtle.digest(\"SHA-256\", data);\r\n            return toBase64(hashed).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\r\n        }\r\n        catch (err) {\r\n            Logger.error(\"CryptoUtils.generateCodeChallenge\", err);\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates a base64-encoded string for a basic auth header\r\n     */\r\n    public static generateBasicAuth(client_id: string, client_secret: string): string {\r\n        const encoder = new TextEncoder();\r\n        const data = encoder.encode([client_id, client_secret].join(\":\"));\r\n        return toBase64(data);\r\n    }\r\n\r\n    /**\r\n     * Generates a hash of a string using a given algorithm\r\n     * @param alg\r\n     * @param message\r\n     */\r\n    public static async hash(alg: string, message: string) : Promise<Uint8Array> {\r\n        const msgUint8 = new TextEncoder().encode(message);\r\n        const hashBuffer = await crypto.subtle.digest(alg, msgUint8);\r\n        return new Uint8Array(hashBuffer);\r\n    }\r\n\r\n    /**\r\n     * Generates a base64url encoded string\r\n     */\r\n    public static encodeBase64Url = (input: Uint8Array) => {\r\n        return toBase64(input).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\r\n    };\r\n\r\n    /**\r\n     * Generates a rfc7638 compliant jwk thumbprint\r\n     * @param jwk\r\n     */\r\n    public static async customCalculateJwkThumbprint(jwk: JsonWebKey): Promise<string> {\r\n        let jsonObject: object;\r\n        switch (jwk.kty) {\r\n            case \"RSA\":\r\n                jsonObject = {\r\n                    \"e\": jwk.e,\r\n                    \"kty\": jwk.kty,\r\n                    \"n\": jwk.n,\r\n                };\r\n                break;\r\n            case \"EC\":\r\n                jsonObject = {\r\n                    \"crv\": jwk.crv,\r\n                    \"kty\": jwk.kty,\r\n                    \"x\": jwk.x,\r\n                    \"y\": jwk.y,\r\n                };\r\n                break;\r\n            case \"OKP\":\r\n                jsonObject = {\r\n                    \"crv\": jwk.crv,\r\n                    \"kty\": jwk.kty,\r\n                    \"x\": jwk.x,\r\n                };\r\n                break;\r\n            case \"oct\":\r\n                jsonObject = {\r\n                    \"crv\": jwk.k,\r\n                    \"kty\": jwk.kty,\r\n                };\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown jwk type\");\r\n        }\r\n        const utf8encodedAndHashed = await CryptoUtils.hash(\"SHA-256\", JSON.stringify(jsonObject));\r\n        return CryptoUtils.encodeBase64Url(utf8encodedAndHashed);\r\n    }\r\n\r\n    public static async generateDPoPProof({\r\n        url,\r\n        accessToken,\r\n        httpMethod,\r\n        keyPair,\r\n        nonce,\r\n    }: GenerateDPoPProofOpts): Promise<string> {\r\n        let hashedToken: Uint8Array;\r\n        let encodedHash: string;\r\n\r\n        const payload: Record<string, string | number> = {\r\n            \"jti\": window.crypto.randomUUID(),\r\n            \"htm\": httpMethod ?? \"GET\",\r\n            \"htu\": url,\r\n            \"iat\": Math.floor(Date.now() / 1000),\r\n        };\r\n\r\n        if (accessToken) {\r\n            hashedToken = await CryptoUtils.hash(\"SHA-256\", accessToken);\r\n            encodedHash = CryptoUtils.encodeBase64Url(hashedToken);\r\n            payload.ath = encodedHash;\r\n        }\r\n\r\n        if (nonce) {\r\n            payload.nonce = nonce;\r\n        }\r\n\r\n        try {\r\n            const publicJwk = await crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\r\n            const header = {\r\n                \"alg\": \"ES256\",\r\n                \"typ\": \"dpop+jwt\",\r\n                \"jwk\": {\r\n                    \"crv\": publicJwk.crv,\r\n                    \"kty\": publicJwk.kty,\r\n                    \"x\": publicJwk.x,\r\n                    \"y\": publicJwk.y,\r\n                },\r\n            };\r\n            return await JwtUtils.generateSignedJwt(header, payload, keyPair.privateKey);\r\n        } catch (err) {\r\n            if (err instanceof TypeError) {\r\n                throw new Error(`Error exporting dpop public key: ${err.message}`);\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static async generateDPoPJkt(keyPair: CryptoKeyPair) : Promise<string> {\r\n        try {\r\n            const publicJwk = await crypto.subtle.exportKey(\"jwk\", keyPair.publicKey);\r\n            return await CryptoUtils.customCalculateJwkThumbprint(publicJwk);\r\n        } catch (err) {\r\n            if (err instanceof TypeError) {\r\n                throw new Error(`Could not retrieve dpop keys from storage: ${err.message}`);\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static async generateDPoPKeys() : Promise<CryptoKeyPair> {\r\n        return await window.crypto.subtle.generateKey(\r\n            {\r\n                name: \"ECDSA\",\r\n                namedCurve: \"P-256\",\r\n            },\r\n            false,\r\n            [\"sign\", \"verify\"],\r\n        );\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger } from \"./Logger\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport type Callback<EventType extends unknown[]> = (...ev: EventType) => (Promise<void> | void);\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class Event<EventType extends unknown[]> {\r\n    protected readonly _logger: Logger;\r\n\r\n    private readonly _callbacks: Array<Callback<EventType>> = [];\r\n\r\n    public constructor(protected readonly _name: string) {\r\n        this._logger = new Logger(`Event('${this._name}')`);\r\n    }\r\n\r\n    public addHandler(cb: Callback<EventType>): () => void {\r\n        this._callbacks.push(cb);\r\n        return () => this.removeHandler(cb);\r\n    }\r\n\r\n    public removeHandler(cb: Callback<EventType>): void {\r\n        const idx = this._callbacks.lastIndexOf(cb);\r\n        if (idx >= 0) {\r\n            this._callbacks.splice(idx, 1);\r\n        }\r\n    }\r\n\r\n    public async raise(...ev: EventType): Promise<void> {\r\n        this._logger.debug(\"raise:\", ...ev);\r\n        for (const cb of this._callbacks) {\r\n            await cb(...ev);\r\n        }\r\n    }\r\n}\r\n", "/**\r\n *\r\n * @public\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/open#window_features\r\n */\r\nexport interface PopupWindowFeatures {\r\n    left?: number;\r\n    top?: number;\r\n    width?: number;\r\n    height?: number;\r\n    menubar?: boolean | string;\r\n    toolbar?: boolean | string;\r\n    location?: boolean | string;\r\n    status?: boolean | string;\r\n    resizable?: boolean | string;\r\n    scrollbars?: boolean | string;\r\n    /** Close popup window after time in seconds, by default it is -1. To enable this feature, set value greater than 0. */\r\n    closePopupWindowAfterInSeconds?: number;\r\n\r\n    [k: string]: boolean | string | number | undefined;\r\n}\r\n\r\nexport class PopupUtils {\r\n    /**\r\n     * Populates a map of window features with a placement centered in front of\r\n     * the current window. If no explicit width is given, a default value is\r\n     * binned into [800, 720, 600, 480, 360] based on the current window's width.\r\n     */\r\n    static center({ ...features }: PopupWindowFeatures): PopupWindowFeatures {\r\n        if (features.width == null)\r\n            features.width = [800, 720, 600, 480].find(width => width <= window.outerWidth / 1.618) ?? 360;\r\n        features.left ??= Math.max(0, Math.round(window.screenX + (window.outerWidth - features.width) / 2));\r\n        if (features.height != null)\r\n            features.top ??= Math.max(0, Math.round(window.screenY + (window.outerHeight - features.height) / 2));\r\n        return features;\r\n    }\r\n\r\n    static serialize(features: PopupWindowFeatures): string {\r\n        return Object.entries(features)\r\n            .filter(([, value]) => value != null)\r\n            .map(([key, value]) => `${key}=${typeof value !== \"boolean\" ? value as string : value ? \"yes\" : \"no\"}`)\r\n            .join(\",\");\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Event } from \"./Event\";\r\nimport { Logger } from \"./Logger\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class Timer extends Event<[void]> {\r\n    protected readonly _logger = new Logger(`Timer('${this._name}')`);\r\n    private _timerHandle: ReturnType<typeof setInterval> | null = null;\r\n    private _expiration = 0;\r\n\r\n    // get the time\r\n    public static getEpochTime(): number {\r\n        return Math.floor(Date.now() / 1000);\r\n    }\r\n\r\n    public init(durationInSeconds: number): void {\r\n        const logger = this._logger.create(\"init\");\r\n        durationInSeconds = Math.max(Math.floor(durationInSeconds), 1);\r\n        const expiration = Timer.getEpochTime() + durationInSeconds;\r\n        if (this.expiration === expiration && this._timerHandle) {\r\n            // no need to reinitialize to same expiration, so bail out\r\n            logger.debug(\"skipping since already initialized for expiration at\", this.expiration);\r\n            return;\r\n        }\r\n\r\n        this.cancel();\r\n\r\n        logger.debug(\"using duration\", durationInSeconds);\r\n        this._expiration = expiration;\r\n\r\n        // we're using a fairly short timer and then checking the expiration in the\r\n        // callback to handle scenarios where the browser device sleeps, and then\r\n        // the timers end up getting delayed.\r\n        const timerDurationInSeconds = Math.min(durationInSeconds, 5);\r\n        this._timerHandle = setInterval(this._callback, timerDurationInSeconds * 1000);\r\n    }\r\n\r\n    public get expiration(): number {\r\n        return this._expiration;\r\n    }\r\n\r\n    public cancel(): void {\r\n        this._logger.create(\"cancel\");\r\n        if (this._timerHandle) {\r\n            clearInterval(this._timerHandle);\r\n            this._timerHandle = null;\r\n        }\r\n    }\r\n\r\n    protected _callback = (): void => {\r\n        const diff = this._expiration - Timer.getEpochTime();\r\n        this._logger.debug(\"timer completes in\", diff);\r\n\r\n        if (this._expiration <= Timer.getEpochTime()) {\r\n            this.cancel();\r\n            void super.raise();\r\n        }\r\n    };\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class UrlUtils {\r\n    public static readParams(url: string, responseMode: \"query\" | \"fragment\" = \"query\"): URLSearchParams {\r\n        if (!url) throw new TypeError(\"Invalid URL\");\r\n        // the base URL is irrelevant, it's just here to support relative url arguments\r\n        const parsedUrl = new URL(url, \"http://127.0.0.1\");\r\n        const params = parsedUrl[responseMode === \"fragment\" ? \"hash\" : \"search\"];\r\n        return new URLSearchParams(params.slice(1));\r\n    }\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const URL_STATE_DELIMITER = \";\";", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger } from \"../utils\";\r\n\r\n/**\r\n * Error class thrown in case of an authentication error.\r\n *\r\n * @public\r\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthError\r\n */\r\nexport class ErrorResponse extends Error {\r\n    /** Marker to detect class: \"ErrorResponse\" */\r\n    public readonly name: string = \"ErrorResponse\";\r\n\r\n    /** An error code string that can be used to classify the types of errors that occur and to respond to errors. */\r\n    public readonly error: string | null;\r\n    /** additional information that can help a developer identify the cause of the error.*/\r\n    public readonly error_description: string | null;\r\n    /**\r\n     * URI identifying a human-readable web page with information about the error, used to provide the client\r\n       developer with additional information about the error.\r\n    */\r\n    public readonly error_uri: string | null;\r\n\r\n    /** custom state data set during the initial signin request */\r\n    public state?: unknown;\r\n\r\n    public readonly session_state: string | null;\r\n\r\n    public url_state?: string;\r\n\r\n    public constructor(\r\n        args: {\r\n            error?: string | null; error_description?: string | null; error_uri?: string | null;\r\n            userState?: unknown; session_state?: string | null; url_state?: string;\r\n        },\r\n        /** The x-www-form-urlencoded request body sent to the authority server */\r\n        public readonly form?: URLSearchParams,\r\n    ) {\r\n        super(args.error_description || args.error || \"\");\r\n\r\n        if (!args.error) {\r\n            Logger.error(\"ErrorResponse\", \"No error passed\");\r\n            throw new Error(\"No error passed\");\r\n        }\r\n\r\n        this.error = args.error;\r\n        this.error_description = args.error_description ?? null;\r\n        this.error_uri = args.error_uri ?? null;\r\n\r\n        this.state = args.userState;\r\n        this.session_state = args.session_state ?? null;\r\n        this.url_state = args.url_state;\r\n    }\r\n}\r\n", "// Copyright (C) 2021 AuthTS Contributors\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\n/**\r\n * Error class thrown in case of network timeouts (e.g IFrame time out).\r\n *\r\n * @public\r\n */\r\nexport class ErrorTimeout extends Error {\r\n    /** Marker to detect class: \"ErrorTimeout\" */\r\n    public readonly name: string = \"ErrorTimeout\";\r\n\r\n    public constructor(message?: string) {\r\n        super(message);\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger, Timer } from \"./utils\";\r\nimport type { User } from \"./User\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport type AccessTokenCallback = (...ev: unknown[]) => (Promise<void> | void);\r\n\r\n/**\r\n * @public\r\n */\r\nexport class AccessTokenEvents {\r\n    protected readonly _logger = new Logger(\"AccessTokenEvents\");\r\n\r\n    private readonly _expiringTimer = new Timer(\"Access token expiring\");\r\n    private readonly _expiredTimer = new Timer(\"Access token expired\");\r\n    private readonly _expiringNotificationTimeInSeconds: number;\r\n\r\n    public constructor(args: { expiringNotificationTimeInSeconds: number }) {\r\n        this._expiringNotificationTimeInSeconds = args.expiringNotificationTimeInSeconds;\r\n    }\r\n\r\n    public async load(container: User): Promise<void> {\r\n        const logger = this._logger.create(\"load\");\r\n        // only register events if there's an access token and it has an expiration\r\n        if (container.access_token && container.expires_in !== undefined) {\r\n            const duration = container.expires_in;\r\n            logger.debug(\"access token present, remaining duration:\", duration);\r\n\r\n            if (duration > 0) {\r\n                // only register expiring if we still have time\r\n                let expiring = duration - this._expiringNotificationTimeInSeconds;\r\n                if (expiring <= 0) {\r\n                    expiring = 1;\r\n                }\r\n\r\n                logger.debug(\"registering expiring timer, raising in\", expiring, \"seconds\");\r\n                this._expiringTimer.init(expiring);\r\n            }\r\n            else {\r\n                logger.debug(\"canceling existing expiring timer because we're past expiration.\");\r\n                this._expiringTimer.cancel();\r\n            }\r\n\r\n            // if it's negative, it will still fire\r\n            const expired = duration + 1;\r\n            logger.debug(\"registering expired timer, raising in\", expired, \"seconds\");\r\n            this._expiredTimer.init(expired);\r\n        }\r\n        else {\r\n            this._expiringTimer.cancel();\r\n            this._expiredTimer.cancel();\r\n        }\r\n    }\r\n\r\n    public async unload(): Promise<void> {\r\n        this._logger.debug(\"unload: canceling existing access token timers\");\r\n        this._expiringTimer.cancel();\r\n        this._expiredTimer.cancel();\r\n    }\r\n\r\n    /**\r\n     * Add callback: Raised prior to the access token expiring.\r\n     */\r\n    public addAccessTokenExpiring(cb: AccessTokenCallback): () => void {\r\n        return this._expiringTimer.addHandler(cb);\r\n    }\r\n    /**\r\n     * Remove callback: Raised prior to the access token expiring.\r\n     */\r\n    public removeAccessTokenExpiring(cb: AccessTokenCallback): void {\r\n        this._expiringTimer.removeHandler(cb);\r\n    }\r\n\r\n    /**\r\n     * Add callback: Raised after the access token has expired.\r\n     */\r\n    public addAccessTokenExpired(cb: AccessTokenCallback): () => void {\r\n        return this._expiredTimer.addHandler(cb);\r\n    }\r\n    /**\r\n     * Remove callback: Raised after the access token has expired.\r\n     */\r\n    public removeAccessTokenExpired(cb: AccessTokenCallback): void {\r\n        this._expiredTimer.removeHandler(cb);\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger } from \"./utils\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class CheckSessionIFrame {\r\n    private readonly _logger = new Logger(\"CheckSessionIFrame\");\r\n    private _frame_origin: string;\r\n    private _frame: HTMLIFrameElement;\r\n    private _timer: ReturnType<typeof setInterval> | null = null;\r\n    private _session_state: string | null = null;\r\n\r\n    public constructor(\r\n        private _callback: () => Promise<void>,\r\n        private _client_id: string,\r\n        url: string,\r\n        private _intervalInSeconds: number,\r\n        private _stopOnError: boolean,\r\n    ) {\r\n        const parsedUrl = new URL(url);\r\n        this._frame_origin = parsedUrl.origin;\r\n\r\n        this._frame = window.document.createElement(\"iframe\");\r\n\r\n        // shotgun approach\r\n        this._frame.style.visibility = \"hidden\";\r\n        this._frame.style.position = \"fixed\";\r\n        this._frame.style.left = \"-1000px\";\r\n        this._frame.style.top = \"0\";\r\n        this._frame.width = \"0\";\r\n        this._frame.height = \"0\";\r\n        this._frame.src = parsedUrl.href;\r\n    }\r\n\r\n    public load(): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            this._frame.onload = () => {\r\n                resolve();\r\n            };\r\n\r\n            window.document.body.appendChild(this._frame);\r\n            window.addEventListener(\"message\", this._message, false);\r\n        });\r\n    }\r\n\r\n    private _message = (e: MessageEvent<string>): void => {\r\n        if (e.origin === this._frame_origin &&\r\n            e.source === this._frame.contentWindow\r\n        ) {\r\n            if (e.data === \"error\") {\r\n                this._logger.error(\"error message from check session op iframe\");\r\n                if (this._stopOnError) {\r\n                    this.stop();\r\n                }\r\n            }\r\n            else if (e.data === \"changed\") {\r\n                this._logger.debug(\"changed message from check session op iframe\");\r\n                this.stop();\r\n                void this._callback();\r\n            }\r\n            else {\r\n                this._logger.debug(e.data + \" message from check session op iframe\");\r\n            }\r\n        }\r\n    };\r\n\r\n    public start(session_state: string): void {\r\n        if (this._session_state === session_state) {\r\n            return;\r\n        }\r\n\r\n        this._logger.create(\"start\");\r\n\r\n        this.stop();\r\n\r\n        this._session_state = session_state;\r\n\r\n        const send = () => {\r\n            if (!this._frame.contentWindow || !this._session_state) {\r\n                return;\r\n            }\r\n\r\n            this._frame.contentWindow.postMessage(this._client_id + \" \" + this._session_state, this._frame_origin);\r\n        };\r\n\r\n        // trigger now\r\n        send();\r\n\r\n        // and setup timer\r\n        this._timer = setInterval(send, this._intervalInSeconds * 1000);\r\n    }\r\n\r\n    public stop(): void {\r\n        this._logger.create(\"stop\");\r\n        this._session_state = null;\r\n\r\n        if (this._timer) {\r\n\r\n            clearInterval(this._timer);\r\n            this._timer = null;\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger } from \"./utils\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class InMemoryWebStorage implements Storage {\r\n    private readonly _logger = new Logger(\"InMemoryWebStorage\");\r\n    private _data: Record<string, string> = {};\r\n\r\n    public clear(): void {\r\n        this._logger.create(\"clear\");\r\n        this._data = {};\r\n    }\r\n\r\n    public getItem(key: string): string {\r\n        this._logger.create(`getItem('${key}')`);\r\n        return this._data[key];\r\n    }\r\n\r\n    public setItem(key: string, value: string): void {\r\n        this._logger.create(`setItem('${key}')`);\r\n        this._data[key] = value;\r\n    }\r\n\r\n    public removeItem(key: string): void {\r\n        this._logger.create(`removeItem('${key}')`);\r\n        delete this._data[key];\r\n    }\r\n\r\n    public get length(): number {\r\n        return Object.getOwnPropertyNames(this._data).length;\r\n    }\r\n\r\n    public key(index: number): string {\r\n        return Object.getOwnPropertyNames(this._data)[index];\r\n    }\r\n}\r\n", "export class ErrorDPoPNonce extends Error {\r\n    /** Marker to detect class: \"ErrorDPoPNonce\" */\r\n    public readonly name: string = \"ErrorDPoPNonce\";\r\n    public readonly nonce: string;\r\n\r\n    public constructor(nonce: string, message?: string) {\r\n        super(message);\r\n        this.nonce = nonce;\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { ErrorResponse, ErrorTimeout } from \"./errors\";\r\nimport type { ExtraHeader } from \"./OidcClientSettings\";\r\nimport { Logger } from \"./utils\";\r\nimport { ErrorDPoPNonce } from \"./errors/ErrorDPoPNonce\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport type JwtHandler = (text: string) => Promise<Record<string, unknown>>;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface GetJsonOpts {\r\n    token?: string;\r\n    credentials?: RequestCredentials;\r\n    timeoutInSeconds?: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface PostFormOpts {\r\n    body: URLSearchParams;\r\n    basicAuth?: string;\r\n    timeoutInSeconds?: number;\r\n    initCredentials?: \"same-origin\" | \"include\" | \"omit\";\r\n    extraHeaders?: Record<string, ExtraHeader>;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class JsonService {\r\n    private readonly _logger = new Logger(\"JsonService\");\r\n\r\n    private _contentTypes: string[] = [];\r\n\r\n    public constructor(\r\n        additionalContentTypes: string[] = [],\r\n        private _jwtHandler: JwtHandler | null = null,\r\n        private _extraHeaders: Record<string, ExtraHeader> = {},\r\n    ) {\r\n        this._contentTypes.push(...additionalContentTypes, \"application/json\");\r\n        if (_jwtHandler) {\r\n            this._contentTypes.push(\"application/jwt\");\r\n        }\r\n    }\r\n\r\n    protected async fetchWithTimeout(input: RequestInfo, init: RequestInit & { timeoutInSeconds?: number } = {}) {\r\n        const { timeoutInSeconds, ...initFetch } = init;\r\n        if (!timeoutInSeconds) {\r\n            return await fetch(input, initFetch);\r\n        }\r\n\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), timeoutInSeconds * 1000);\r\n\r\n        try {\r\n            const response = await fetch(input, {\r\n                ...init,\r\n                signal: controller.signal,\r\n            });\r\n            return response;\r\n        }\r\n        catch (err) {\r\n            if (err instanceof DOMException && err.name === \"AbortError\") {\r\n                throw new ErrorTimeout(\"Network timed out\");\r\n            }\r\n            throw err;\r\n        }\r\n        finally {\r\n            clearTimeout(timeoutId);\r\n        }\r\n    }\r\n\r\n    public async getJson(url: string, {\r\n        token,\r\n        credentials,\r\n        timeoutInSeconds,\r\n    }: GetJsonOpts = {}): Promise<Record<string, unknown>> {\r\n        const logger = this._logger.create(\"getJson\");\r\n        const headers: HeadersInit = {\r\n            \"Accept\": this._contentTypes.join(\", \"),\r\n        };\r\n        if (token) {\r\n            logger.debug(\"token passed, setting Authorization header\");\r\n            headers[\"Authorization\"] = \"Bearer \" + token;\r\n        }\r\n\r\n        this._appendExtraHeaders(headers);\r\n\r\n        let response: Response;\r\n        try {\r\n            logger.debug(\"url:\", url);\r\n            response = await this.fetchWithTimeout(url, { method: \"GET\", headers, timeoutInSeconds, credentials });\r\n        }\r\n        catch (err) {\r\n            logger.error(\"Network Error\");\r\n            throw err;\r\n        }\r\n\r\n        logger.debug(\"HTTP response received, status\", response.status);\r\n        const contentType = response.headers.get(\"Content-Type\");\r\n        if (contentType && !this._contentTypes.find(item => contentType.startsWith(item))) {\r\n            logger.throw(new Error(`Invalid response Content-Type: ${(contentType ?? \"undefined\")}, from URL: ${url}`));\r\n        }\r\n        if (response.ok && this._jwtHandler && contentType?.startsWith(\"application/jwt\")) {\r\n            return await this._jwtHandler(await response.text());\r\n        }\r\n        let json: Record<string, unknown>;\r\n        try {\r\n            json = await response.json();\r\n        }\r\n        catch (err) {\r\n            logger.error(\"Error parsing JSON response\", err);\r\n            if (response.ok) throw err;\r\n            throw new Error(`${response.statusText} (${response.status})`);\r\n        }\r\n        if (!response.ok) {\r\n            logger.error(\"Error from server:\", json);\r\n            if (json.error) {\r\n                throw new ErrorResponse(json);\r\n            }\r\n            throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);\r\n        }\r\n        return json;\r\n    }\r\n\r\n    public async postForm(url: string, {\r\n        body,\r\n        basicAuth,\r\n        timeoutInSeconds,\r\n        initCredentials,\r\n        extraHeaders,\r\n    }: PostFormOpts): Promise<Record<string, unknown>> {\r\n        const logger = this._logger.create(\"postForm\");\r\n        const headers: HeadersInit = {\r\n            \"Accept\": this._contentTypes.join(\", \"),\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n            ...extraHeaders,\r\n        };\r\n        if (basicAuth !== undefined) {\r\n            headers[\"Authorization\"] = \"Basic \" + basicAuth;\r\n        }\r\n\r\n        this._appendExtraHeaders(headers);\r\n\r\n        let response: Response;\r\n        try {\r\n            logger.debug(\"url:\", url);\r\n            response = await this.fetchWithTimeout(url, { method: \"POST\", headers, body, timeoutInSeconds, credentials: initCredentials });\r\n        }\r\n        catch (err) {\r\n            logger.error(\"Network error\");\r\n            throw err;\r\n        }\r\n\r\n        logger.debug(\"HTTP response received, status\", response.status);\r\n        const contentType = response.headers.get(\"Content-Type\");\r\n        if (contentType && !this._contentTypes.find(item => contentType.startsWith(item))) {\r\n            throw new Error(`Invalid response Content-Type: ${(contentType ?? \"undefined\")}, from URL: ${url}`);\r\n        }\r\n\r\n        const responseText = await response.text();\r\n\r\n        let json: Record<string, unknown> = {};\r\n        if (responseText) {\r\n            try {\r\n                json = JSON.parse(responseText);\r\n            }\r\n            catch (err) {\r\n                logger.error(\"Error parsing JSON response\", err);\r\n                if (response.ok) throw err;\r\n                throw new Error(`${response.statusText} (${response.status})`);\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            logger.error(\"Error from server:\", json);\r\n            if (response.headers.has(\"dpop-nonce\")) {\r\n                const nonce = response.headers.get(\"dpop-nonce\") as string;\r\n                throw new ErrorDPoPNonce(nonce, `${JSON.stringify(json)}`);\r\n            }\r\n            if (json.error) {\r\n                throw new ErrorResponse(json, body);\r\n            }\r\n            throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);\r\n        }\r\n\r\n        return json;\r\n    }\r\n\r\n    private _appendExtraHeaders(\r\n        headers: Record<string, string>,\r\n    ): void {\r\n        const logger = this._logger.create(\"appendExtraHeaders\");\r\n        const customKeys = Object.keys(this._extraHeaders);\r\n        const protectedHeaders = [\r\n            \"accept\",\r\n            \"content-type\",\r\n        ];\r\n        const preventOverride = [\r\n            \"authorization\",\r\n        ];\r\n        if (customKeys.length === 0) {\r\n            return;\r\n        }\r\n        customKeys.forEach((headerName) => {\r\n            if (protectedHeaders.includes(headerName.toLocaleLowerCase())) {\r\n                logger.warn(\"Protected header could not be set\", headerName, protectedHeaders);\r\n                return;\r\n            }\r\n            if (preventOverride.includes(headerName.toLocaleLowerCase()) &&\r\n                Object.keys(headers).includes(headerName)) {\r\n                logger.warn(\"Header could not be overridden\", headerName, preventOverride);\r\n                return;\r\n            }\r\n            const content = (typeof this._extraHeaders[headerName] === \"function\") ?\r\n                (this._extraHeaders[headerName] as ()=>string)() :\r\n                this._extraHeaders[headerName];\r\n            if (content && content !== \"\") {\r\n                headers[headerName] = content;\r\n            }\r\n        });\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger } from \"./utils\";\r\nimport { JsonService } from \"./JsonService\";\r\nimport type { OidcClientSettingsStore, SigningKey } from \"./OidcClientSettings\";\r\nimport type { OidcMetadata } from \"./OidcMetadata\";\r\n\r\n/**\r\n * @public\r\n * @see https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\r\n */\r\nexport class MetadataService {\r\n    private readonly _logger = new Logger(\"MetadataService\");\r\n    private readonly _jsonService;\r\n\r\n    // cache\r\n    private _metadataUrl: string;\r\n    private _signingKeys: SigningKey[] | null = null;\r\n    private _metadata: Partial<OidcMetadata> | null = null;\r\n    private _fetchRequestCredentials: RequestCredentials | undefined;\r\n\r\n    public constructor(private readonly _settings: OidcClientSettingsStore) {\r\n        this._metadataUrl = this._settings.metadataUrl;\r\n        this._jsonService = new JsonService(\r\n            [\"application/jwk-set+json\"],\r\n            null,\r\n            this._settings.extraHeaders,\r\n        );\r\n        if (this._settings.signingKeys) {\r\n            this._logger.debug(\"using signingKeys from settings\");\r\n            this._signingKeys = this._settings.signingKeys;\r\n        }\r\n\r\n        if (this._settings.metadata) {\r\n            this._logger.debug(\"using metadata from settings\");\r\n            this._metadata = this._settings.metadata;\r\n        }\r\n\r\n        if (this._settings.fetchRequestCredentials) {\r\n            this._logger.debug(\"using fetchRequestCredentials from settings\");\r\n            this._fetchRequestCredentials = this._settings.fetchRequestCredentials;\r\n        }\r\n    }\r\n\r\n    public resetSigningKeys(): void {\r\n        this._signingKeys = null;\r\n    }\r\n\r\n    public async getMetadata(): Promise<Partial<OidcMetadata>> {\r\n        const logger = this._logger.create(\"getMetadata\");\r\n        if (this._metadata) {\r\n            logger.debug(\"using cached values\");\r\n            return this._metadata;\r\n        }\r\n\r\n        if (!this._metadataUrl) {\r\n            logger.throw(new Error(\"No authority or metadataUrl configured on settings\"));\r\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\r\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\r\n        }\r\n\r\n        logger.debug(\"getting metadata from\", this._metadataUrl);\r\n        const metadata = await this._jsonService.getJson(this._metadataUrl, { credentials: this._fetchRequestCredentials, timeoutInSeconds: this._settings.requestTimeoutInSeconds });\r\n\r\n        logger.debug(\"merging remote JSON with seed metadata\");\r\n        this._metadata = Object.assign({}, this._settings.metadataSeed, metadata);\r\n        return this._metadata;\r\n    }\r\n\r\n    public getIssuer(): Promise<string> {\r\n        return this._getMetadataProperty(\"issuer\") as Promise<string>;\r\n    }\r\n\r\n    public getAuthorizationEndpoint(): Promise<string> {\r\n        return this._getMetadataProperty(\"authorization_endpoint\") as Promise<string>;\r\n    }\r\n\r\n    public getUserInfoEndpoint(): Promise<string> {\r\n        return this._getMetadataProperty(\"userinfo_endpoint\") as Promise<string>;\r\n    }\r\n\r\n    public getTokenEndpoint(optional: false): Promise<string>;\r\n    public getTokenEndpoint(optional?: true): Promise<string | undefined>;\r\n    public getTokenEndpoint(optional = true): Promise<string | undefined> {\r\n        return this._getMetadataProperty(\"token_endpoint\", optional) as Promise<string | undefined>;\r\n    }\r\n\r\n    public getCheckSessionIframe(): Promise<string | undefined> {\r\n        return this._getMetadataProperty(\"check_session_iframe\", true) as Promise<string | undefined>;\r\n    }\r\n\r\n    public getEndSessionEndpoint(): Promise<string | undefined> {\r\n        return this._getMetadataProperty(\"end_session_endpoint\", true) as Promise<string | undefined>;\r\n    }\r\n\r\n    public getRevocationEndpoint(optional: false): Promise<string>;\r\n    public getRevocationEndpoint(optional?: true): Promise<string | undefined>;\r\n    public getRevocationEndpoint(optional = true): Promise<string | undefined> {\r\n        return this._getMetadataProperty(\"revocation_endpoint\", optional) as Promise<string | undefined>;\r\n    }\r\n\r\n    public getKeysEndpoint(optional: false): Promise<string>;\r\n    public getKeysEndpoint(optional?: true): Promise<string | undefined>;\r\n    public getKeysEndpoint(optional = true): Promise<string | undefined> {\r\n        return this._getMetadataProperty(\"jwks_uri\", optional) as Promise<string | undefined>;\r\n    }\r\n\r\n    protected async _getMetadataProperty(name: keyof OidcMetadata, optional=false): Promise<string | boolean | string[] | undefined> {\r\n        const logger = this._logger.create(`_getMetadataProperty('${name}')`);\r\n\r\n        const metadata = await this.getMetadata();\r\n        logger.debug(\"resolved\");\r\n\r\n        if (metadata[name] === undefined) {\r\n            if (optional === true) {\r\n                logger.warn(\"Metadata does not contain optional property\");\r\n                return undefined;\r\n            }\r\n\r\n            logger.throw(new Error(\"Metadata does not contain property \" + name));\r\n        }\r\n\r\n        return metadata[name];\r\n    }\r\n\r\n    public async getSigningKeys(): Promise<SigningKey[] | null> {\r\n        const logger = this._logger.create(\"getSigningKeys\");\r\n        if (this._signingKeys) {\r\n            logger.debug(\"returning signingKeys from cache\");\r\n            return this._signingKeys;\r\n        }\r\n\r\n        const jwks_uri = await this.getKeysEndpoint(false);\r\n        logger.debug(\"got jwks_uri\", jwks_uri);\r\n\r\n        const keySet = await this._jsonService.getJson(jwks_uri, { timeoutInSeconds: this._settings.requestTimeoutInSeconds });\r\n        logger.debug(\"got key set\", keySet);\r\n\r\n        if (!Array.isArray(keySet.keys)) {\r\n            logger.throw(new Error(\"Missing keys on keyset\"));\r\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\r\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\r\n        }\r\n\r\n        this._signingKeys = keySet.keys;\r\n        return this._signingKeys;\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger } from \"./utils\";\r\nimport type { StateStore } from \"./StateStore\";\r\nimport type { AsyncStorage } from \"./AsyncStorage\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class WebStorageStateStore implements StateStore {\r\n    private readonly _logger = new Logger(\"WebStorageStateStore\");\r\n\r\n    private readonly _store: AsyncStorage | Storage;\r\n    private readonly _prefix: string;\r\n\r\n    public constructor({\r\n        prefix = \"oidc.\",\r\n        store = localStorage,\r\n    }: { prefix?: string; store?: AsyncStorage | Storage } = {}) {\r\n        this._store = store;\r\n        this._prefix = prefix;\r\n    }\r\n\r\n    public async set(key: string, value: string): Promise<void> {\r\n        this._logger.create(`set('${key}')`);\r\n\r\n        key = this._prefix + key;\r\n        await this._store.setItem(key, value);\r\n    }\r\n\r\n    public async get(key: string): Promise<string | null> {\r\n        this._logger.create(`get('${key}')`);\r\n\r\n        key = this._prefix + key;\r\n        const item = await this._store.getItem(key);\r\n        return item;\r\n    }\r\n\r\n    public async remove(key: string): Promise<string | null> {\r\n        this._logger.create(`remove('${key}')`);\r\n\r\n        key = this._prefix + key;\r\n        const item = await this._store.getItem(key);\r\n        await this._store.removeItem(key);\r\n        return item;\r\n    }\r\n\r\n    public async getAllKeys(): Promise<string[]> {\r\n        this._logger.create(\"getAllKeys\");\r\n        const len = await this._store.length;\r\n\r\n        const keys = [];\r\n        for (let index = 0; index < len; index++) {\r\n            const key = await this._store.key(index);\r\n            if (key && key.indexOf(this._prefix) === 0) {\r\n                keys.push(key.substr(this._prefix.length));\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { WebStorageStateStore } from \"./WebStorageStateStore\";\r\nimport type { OidcMetadata } from \"./OidcMetadata\";\r\nimport type { StateStore } from \"./StateStore\";\r\nimport { InMemoryWebStorage } from \"./InMemoryWebStorage\";\r\nimport type { DPoPStore } from \"./DPoPStore\";\r\n\r\nconst DefaultResponseType = \"code\";\r\nconst DefaultScope = \"openid\";\r\nconst DefaultClientAuthentication = \"client_secret_post\";\r\nconst DefaultStaleStateAgeInSeconds = 60 * 15;\r\n\r\n/**\r\n * @public\r\n */\r\nexport type SigningKey = Record<string, string | string[]>;\r\n\r\n/**\r\n * @public\r\n */\r\nexport type ExtraHeader = string | (() => string);\r\n\r\n/**\r\n * Optional DPoP settings\r\n * @public\r\n */\r\nexport interface DPoPSettings {\r\n    bind_authorization_code?: boolean;\r\n    store: DPoPStore;\r\n}\r\n\r\n/**\r\n * The settings used to configure the {@link OidcClient}.\r\n *\r\n * @public\r\n */\r\nexport interface OidcClientSettings {\r\n    /** The URL of the OIDC/OAuth2 provider */\r\n    authority: string;\r\n    metadataUrl?: string;\r\n    /** Provide metadata when authority server does not allow CORS on the metadata endpoint */\r\n    metadata?: Partial<OidcMetadata>;\r\n    /** Can be used to seed or add additional values to the results of the discovery request */\r\n    metadataSeed?: Partial<OidcMetadata>;\r\n    /** Provide signingKeys when authority server does not allow CORS on the jwks uri */\r\n    signingKeys?: SigningKey[];\r\n\r\n    /** Your client application's identifier as registered with the OIDC/OAuth2 */\r\n    client_id: string;\r\n    client_secret?: string;\r\n    /** The type of response desired from the OIDC/OAuth2 provider (default: \"code\") */\r\n    response_type?: string;\r\n    /** The scope being requested from the OIDC/OAuth2 provider (default: \"openid\") */\r\n    scope?: string;\r\n    /** The redirect URI of your client application to receive a response from the OIDC/OAuth2 provider */\r\n    redirect_uri: string;\r\n    /** The OIDC/OAuth2 post-logout redirect URI */\r\n    post_logout_redirect_uri?: string;\r\n\r\n    /**\r\n     * Client authentication method that is used to authenticate when using the token endpoint (default: \"client_secret_post\")\r\n     * - \"client_secret_basic\": using the HTTP Basic authentication scheme\r\n     * - \"client_secret_post\": including the client credentials in the request body\r\n     *\r\n     * See https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\r\n     */\r\n    client_authentication?: \"client_secret_basic\" | \"client_secret_post\";\r\n\r\n    /** optional protocol param */\r\n    prompt?: string;\r\n    /** optional protocol param */\r\n    display?: string;\r\n    /** optional protocol param */\r\n    max_age?: number;\r\n    /** optional protocol param */\r\n    ui_locales?: string;\r\n    /** optional protocol param */\r\n    acr_values?: string;\r\n    /** optional protocol param */\r\n    resource?: string | string[];\r\n\r\n    /**\r\n     * Optional protocol param\r\n     * The response mode used by the authority server is defined by the response_type unless explicitly specified:\r\n     * - Response mode for the OAuth 2.0 response type \"code\" is the \"query\" encoding\r\n     * - Response mode for the OAuth 2.0 response type \"token\" is the \"fragment\" encoding\r\n     *\r\n     * @see https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#ResponseModes\r\n     */\r\n    response_mode?: \"query\" | \"fragment\";\r\n\r\n    /**\r\n     * Should optional OIDC protocol claims be removed from profile or specify the ones to be removed (default: true)\r\n     * When true, the following claims are removed by default: [\"nbf\", \"jti\", \"auth_time\", \"nonce\", \"acr\", \"amr\", \"azp\", \"at_hash\"]\r\n     * When specifying claims, the following claims are not allowed: [\"sub\", \"iss\", \"aud\", \"exp\", \"iat\"]\r\n    */\r\n    filterProtocolClaims?: boolean | string[];\r\n    /** Flag to control if additional identity data is loaded from the user info endpoint in order to populate the user's profile (default: false) */\r\n    loadUserInfo?: boolean;\r\n    /** Number (in seconds) indicating the age of state entries in storage for authorize requests that are considered abandoned and thus can be cleaned up (default: 900) */\r\n    staleStateAgeInSeconds?: number;\r\n\r\n    /**\r\n     * Indicates how objects returned from the user info endpoint as claims (e.g. `address`) are merged into the claims from the\r\n     * id token as a single object.  (default: `{ array: \"replace\" }`)\r\n     * - array: \"replace\": natives (string, int, float) and arrays are replaced, objects are merged as distinct objects\r\n     * - array: \"merge\": natives (string, int, float) are replaced, arrays and objects are merged as distinct objects\r\n     */\r\n    mergeClaimsStrategy?: { array: \"replace\" | \"merge\" };\r\n\r\n    /**\r\n     * Storage object used to persist interaction state (default: window.localStorage, InMemoryWebStorage iff no window).\r\n     * E.g. `stateStore: new WebStorageStateStore({ store: window.localStorage })`\r\n     */\r\n    stateStore?: StateStore;\r\n\r\n    /**\r\n     * An object containing additional query string parameters to be including in the authorization request.\r\n     * E.g, when using Azure AD to obtain an access token an additional resource parameter is required. extraQueryParams: `{resource:\"some_identifier\"}`\r\n     */\r\n    extraQueryParams?: Record<string, string | number | boolean>;\r\n\r\n    extraTokenParams?: Record<string, unknown>;\r\n\r\n    /**\r\n     * An object containing additional header to be including in request.\r\n     */\r\n    extraHeaders?: Record<string, ExtraHeader>;\r\n\r\n    /**\r\n     * DPoP enabled or disabled\r\n     */\r\n    dpop?: DPoPSettings | undefined;\r\n\r\n    /**\r\n     * Will check the content type header of the response of the revocation endpoint to match these passed values (default: [])\r\n     */\r\n    revokeTokenAdditionalContentTypes?: string[];\r\n    /**\r\n     * Will disable PKCE validation, changing to true will not append to sign in request code_challenge and code_challenge_method. (default: false)\r\n     */\r\n    disablePKCE?: boolean;\r\n    /**\r\n     * Sets the credentials for fetch requests. (default: \"same-origin\")\r\n     * Use this if you need to send cookies to the OIDC/OAuth2 provider or if you are using a proxy that requires cookies\r\n     */\r\n    fetchRequestCredentials?: RequestCredentials;\r\n\r\n    /**\r\n     * Only scopes in this list will be passed in the token refresh request.\r\n     */\r\n    refreshTokenAllowedScope?: string | undefined;\r\n\r\n    /**\r\n     * Defines request timeouts globally across all requests made to the authorisation server\r\n     */\r\n    requestTimeoutInSeconds?: number | undefined;\r\n\r\n    /**\r\n     * https://datatracker.ietf.org/doc/html/rfc6749#section-3.3 describes behavior when omitting scopes from sign in requests\r\n     * If the IDP supports default scopes, this setting will ignore the scopes property passed to the config. (Default: false)\r\n     */\r\n    omitScopeWhenRequesting?: boolean;\r\n}\r\n\r\n/**\r\n * The settings with defaults applied of the {@link OidcClient}.\r\n *\r\n * @public\r\n * @see {@link OidcClientSettings}\r\n */\r\nexport class OidcClientSettingsStore {\r\n    // metadata\r\n    public readonly authority: string;\r\n    public readonly metadataUrl: string;\r\n    public readonly metadata: Partial<OidcMetadata> | undefined;\r\n    public readonly metadataSeed: Partial<OidcMetadata> | undefined;\r\n    public readonly signingKeys: SigningKey[] | undefined;\r\n\r\n    // client config\r\n    public readonly client_id: string;\r\n    public readonly client_secret: string | undefined;\r\n    public readonly response_type: string;\r\n    public readonly scope: string;\r\n    public readonly redirect_uri: string;\r\n    public readonly post_logout_redirect_uri: string | undefined;\r\n    public readonly client_authentication: \"client_secret_basic\" | \"client_secret_post\";\r\n\r\n    // optional protocol params\r\n    public readonly prompt: string | undefined;\r\n    public readonly display: string | undefined;\r\n    public readonly max_age: number | undefined;\r\n    public readonly ui_locales: string | undefined;\r\n    public readonly acr_values: string | undefined;\r\n    public readonly resource: string | string[] | undefined;\r\n    public readonly response_mode: \"query\" | \"fragment\" | undefined;\r\n\r\n    // behavior flags\r\n    public readonly filterProtocolClaims: boolean | string[];\r\n    public readonly loadUserInfo: boolean;\r\n    public readonly staleStateAgeInSeconds: number;\r\n    public readonly mergeClaimsStrategy: { array: \"replace\" | \"merge\" };\r\n    public readonly omitScopeWhenRequesting: boolean;\r\n\r\n    public readonly stateStore: StateStore;\r\n\r\n    // extra\r\n    public readonly extraQueryParams: Record<string, string | number | boolean>;\r\n    public readonly extraTokenParams: Record<string, unknown>;\r\n    public readonly dpop: DPoPSettings | undefined;\r\n    public readonly extraHeaders: Record<string, ExtraHeader>;\r\n\r\n    public readonly revokeTokenAdditionalContentTypes?: string[];\r\n    public readonly fetchRequestCredentials: RequestCredentials;\r\n    public readonly refreshTokenAllowedScope: string | undefined;\r\n    public readonly disablePKCE: boolean;\r\n    public readonly requestTimeoutInSeconds: number | undefined;\r\n\r\n    public constructor({\r\n        // metadata related\r\n        authority, metadataUrl, metadata, signingKeys, metadataSeed,\r\n        // client related\r\n        client_id, client_secret, response_type = DefaultResponseType, scope = DefaultScope,\r\n        redirect_uri, post_logout_redirect_uri,\r\n        client_authentication = DefaultClientAuthentication,\r\n        // optional protocol\r\n        prompt, display, max_age, ui_locales, acr_values, resource, response_mode,\r\n        // behavior flags\r\n        filterProtocolClaims = true,\r\n        loadUserInfo = false,\r\n        requestTimeoutInSeconds,\r\n        staleStateAgeInSeconds = DefaultStaleStateAgeInSeconds,\r\n        mergeClaimsStrategy = { array: \"replace\" },\r\n        disablePKCE = false,\r\n        // other behavior\r\n        stateStore,\r\n        revokeTokenAdditionalContentTypes,\r\n        fetchRequestCredentials,\r\n        refreshTokenAllowedScope,\r\n        // extra\r\n        extraQueryParams = {},\r\n        extraTokenParams = {},\r\n        extraHeaders = {},\r\n        dpop,\r\n        omitScopeWhenRequesting = false,\r\n    }: OidcClientSettings) {\r\n\r\n        this.authority = authority;\r\n\r\n        if (metadataUrl) {\r\n            this.metadataUrl = metadataUrl;\r\n        } else {\r\n            this.metadataUrl = authority;\r\n            if (authority) {\r\n                if (!this.metadataUrl.endsWith(\"/\")) {\r\n                    this.metadataUrl += \"/\";\r\n                }\r\n                this.metadataUrl += \".well-known/openid-configuration\";\r\n            }\r\n        }\r\n\r\n        this.metadata = metadata;\r\n        this.metadataSeed = metadataSeed;\r\n        this.signingKeys = signingKeys;\r\n\r\n        this.client_id = client_id;\r\n        this.client_secret = client_secret;\r\n        this.response_type = response_type;\r\n        this.scope = scope;\r\n        this.redirect_uri = redirect_uri;\r\n        this.post_logout_redirect_uri = post_logout_redirect_uri;\r\n        this.client_authentication = client_authentication;\r\n\r\n        this.prompt = prompt;\r\n        this.display = display;\r\n        this.max_age = max_age;\r\n        this.ui_locales = ui_locales;\r\n        this.acr_values = acr_values;\r\n        this.resource = resource;\r\n        this.response_mode = response_mode;\r\n\r\n        this.filterProtocolClaims = filterProtocolClaims ?? true;\r\n        this.loadUserInfo = !!loadUserInfo;\r\n        this.staleStateAgeInSeconds = staleStateAgeInSeconds;\r\n        this.mergeClaimsStrategy = mergeClaimsStrategy;\r\n        this.omitScopeWhenRequesting = omitScopeWhenRequesting;\r\n        this.disablePKCE = !!disablePKCE;\r\n        this.revokeTokenAdditionalContentTypes = revokeTokenAdditionalContentTypes;\r\n\r\n        this.fetchRequestCredentials = fetchRequestCredentials ? fetchRequestCredentials : \"same-origin\";\r\n        this.requestTimeoutInSeconds = requestTimeoutInSeconds;\r\n\r\n        if (stateStore) {\r\n            this.stateStore = stateStore;\r\n        }\r\n        else {\r\n            const store = typeof window !== \"undefined\" ? window.localStorage : new InMemoryWebStorage();\r\n            this.stateStore = new WebStorageStateStore({ store });\r\n        }\r\n\r\n        this.refreshTokenAllowedScope = refreshTokenAllowedScope;\r\n\r\n        this.extraQueryParams = extraQueryParams;\r\n        this.extraTokenParams = extraTokenParams;\r\n        this.extraHeaders = extraHeaders;\r\n\r\n        this.dpop = dpop;\r\n        if (this.dpop && !this.dpop?.store) {\r\n            throw new Error(\"A DPoPStore is required when dpop is enabled\");\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger, JwtUtils } from \"./utils\";\r\nimport { JsonService } from \"./JsonService\";\r\nimport type { MetadataService } from \"./MetadataService\";\r\nimport type { JwtClaims } from \"./Claims\";\r\nimport type { OidcClientSettingsStore } from \"./OidcClientSettings\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class UserInfoService {\r\n    protected readonly _logger = new Logger(\"UserInfoService\");\r\n    private readonly _jsonService: JsonService;\r\n\r\n    public constructor(private readonly _settings: OidcClientSettingsStore,\r\n        private readonly _metadataService: MetadataService,\r\n    ) {\r\n        this._jsonService = new JsonService(\r\n            undefined,\r\n            this._getClaimsFromJwt,\r\n            this._settings.extraHeaders,\r\n        );\r\n    }\r\n\r\n    public async getClaims(token: string): Promise<JwtClaims> {\r\n        const logger = this._logger.create(\"getClaims\");\r\n        if (!token) {\r\n            this._logger.throw(new Error(\"No token passed\"));\r\n        }\r\n\r\n        const url = await this._metadataService.getUserInfoEndpoint();\r\n        logger.debug(\"got userinfo url\", url);\r\n\r\n        const claims = await this._jsonService.getJson(url, {\r\n            token,\r\n            credentials: this._settings.fetchRequestCredentials,\r\n            timeoutInSeconds: this._settings.requestTimeoutInSeconds,\r\n        });\r\n        logger.debug(\"got claims\", claims);\r\n\r\n        return claims;\r\n    }\r\n\r\n    protected _getClaimsFromJwt = async (responseText: string): Promise<JwtClaims> => {\r\n        const logger = this._logger.create(\"_getClaimsFromJwt\");\r\n        try {\r\n            const payload = JwtUtils.decode(responseText);\r\n            logger.debug(\"JWT decoding successful\");\r\n\r\n            return payload;\r\n        } catch (err) {\r\n            logger.error(\"Error parsing JWT response\");\r\n            throw err;\r\n        }\r\n    };\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { CryptoUtils, Logger } from \"./utils\";\r\nimport { JsonService } from \"./JsonService\";\r\nimport type { MetadataService } from \"./MetadataService\";\r\nimport type { ExtraHeader, OidcClientSettingsStore } from \"./OidcClientSettings\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface ExchangeCodeArgs {\r\n    client_id?: string;\r\n    client_secret?: string;\r\n    redirect_uri?: string;\r\n\r\n    grant_type?: string;\r\n    code: string;\r\n    code_verifier?: string;\r\n\r\n    extraHeaders?: Record<string, ExtraHeader>;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface ExchangeCredentialsArgs {\r\n    client_id?: string;\r\n    client_secret?: string;\r\n\r\n    grant_type?: string;\r\n    scope?: string;\r\n\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface ExchangeRefreshTokenArgs {\r\n    client_id?: string;\r\n    client_secret?: string;\r\n    redirect_uri?: string;\r\n\r\n    grant_type?: string;\r\n    refresh_token: string;\r\n    scope?: string;\r\n    resource?: string | string[];\r\n\r\n    timeoutInSeconds?: number;\r\n\r\n    extraHeaders?: Record<string, ExtraHeader>;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface RevokeArgs {\r\n    token: string;\r\n    token_type_hint?: \"access_token\" | \"refresh_token\";\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class TokenClient {\r\n    private readonly _logger = new Logger(\"TokenClient\");\r\n    private readonly _jsonService;\r\n\r\n    public constructor(\r\n        private readonly _settings: OidcClientSettingsStore,\r\n        private readonly _metadataService: MetadataService,\r\n    ) {\r\n        this._jsonService = new JsonService(\r\n            this._settings.revokeTokenAdditionalContentTypes,\r\n            null,\r\n            this._settings.extraHeaders,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Exchange code.\r\n     *\r\n     * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.1.3\r\n     */\r\n    public async exchangeCode({\r\n        grant_type = \"authorization_code\",\r\n        redirect_uri = this._settings.redirect_uri,\r\n        client_id = this._settings.client_id,\r\n        client_secret = this._settings.client_secret,\r\n        extraHeaders,\r\n        ...args\r\n    }: ExchangeCodeArgs): Promise<Record<string, unknown>> {\r\n        const logger = this._logger.create(\"exchangeCode\");\r\n        if (!client_id) {\r\n            logger.throw(new Error(\"A client_id is required\"));\r\n        }\r\n        if (!redirect_uri) {\r\n            logger.throw(new Error(\"A redirect_uri is required\"));\r\n        }\r\n        if (!args.code) {\r\n            logger.throw(new Error(\"A code is required\"));\r\n        }\r\n\r\n        const params = new URLSearchParams({ grant_type, redirect_uri });\r\n        for (const [key, value] of Object.entries(args)) {\r\n            if (value != null) {\r\n                params.set(key, value);\r\n            }\r\n        }\r\n        let basicAuth: string | undefined;\r\n        switch (this._settings.client_authentication) {\r\n            case \"client_secret_basic\":\r\n                if (client_secret === undefined || client_secret === null) {\r\n                    logger.throw(new Error(\"A client_secret is required\"));\r\n                    // eslint-disable-next-line @typescript-eslint/only-throw-error\r\n                    throw null; // https://github.com/microsoft/TypeScript/issues/46972\r\n                }\r\n                basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\r\n                break;\r\n            case \"client_secret_post\":\r\n                params.append(\"client_id\", client_id);\r\n                if (client_secret) {\r\n                    params.append(\"client_secret\", client_secret);\r\n                }\r\n                break;\r\n        }\r\n\r\n        const url = await this._metadataService.getTokenEndpoint(false);\r\n        logger.debug(\"got token endpoint\");\r\n\r\n        const response = await this._jsonService.postForm(url, {\r\n            body: params,\r\n            basicAuth,\r\n            timeoutInSeconds: this._settings.requestTimeoutInSeconds,\r\n            initCredentials: this._settings.fetchRequestCredentials,\r\n            extraHeaders,\r\n        });\r\n\r\n        logger.debug(\"got response\");\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Exchange credentials.\r\n     *\r\n     * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.3.2\r\n     */\r\n    public async exchangeCredentials({\r\n        grant_type = \"password\",\r\n        client_id = this._settings.client_id,\r\n        client_secret = this._settings.client_secret,\r\n        scope = this._settings.scope,\r\n        ...args\r\n    }: ExchangeCredentialsArgs): Promise<Record<string, unknown>> {\r\n        const logger = this._logger.create(\"exchangeCredentials\");\r\n\r\n        if (!client_id) {\r\n            logger.throw(new Error(\"A client_id is required\"));\r\n        }\r\n\r\n        const params = new URLSearchParams({ grant_type });\r\n        if (!this._settings.omitScopeWhenRequesting) {\r\n            params.set(\"scope\", scope);\r\n        }\r\n        for (const [key, value] of Object.entries(args)) {\r\n            if (value != null) {\r\n                params.set(key, value);\r\n            }\r\n        }\r\n\r\n        let basicAuth: string | undefined;\r\n        switch (this._settings.client_authentication) {\r\n            case \"client_secret_basic\":\r\n                if (client_secret === undefined || client_secret === null) {\r\n                    logger.throw(new Error(\"A client_secret is required\"));\r\n                    // eslint-disable-next-line @typescript-eslint/only-throw-error\r\n                    throw null; // https://github.com/microsoft/TypeScript/issues/46972\r\n                }\r\n                basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\r\n                break;\r\n            case \"client_secret_post\":\r\n                params.append(\"client_id\", client_id);\r\n                if (client_secret) {\r\n                    params.append(\"client_secret\", client_secret);\r\n                }\r\n                break;\r\n        }\r\n\r\n        const url = await this._metadataService.getTokenEndpoint(false);\r\n        logger.debug(\"got token endpoint\");\r\n\r\n        const response = await this._jsonService.postForm(url, { body: params, basicAuth, timeoutInSeconds: this._settings.requestTimeoutInSeconds, initCredentials: this._settings.fetchRequestCredentials });\r\n        logger.debug(\"got response\");\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Exchange a refresh token.\r\n     *\r\n     * @see https://www.rfc-editor.org/rfc/rfc6749#section-6\r\n     */\r\n    public async exchangeRefreshToken({\r\n        grant_type = \"refresh_token\",\r\n        client_id = this._settings.client_id,\r\n        client_secret = this._settings.client_secret,\r\n        timeoutInSeconds,\r\n        extraHeaders,\r\n        ...args\r\n    }: ExchangeRefreshTokenArgs): Promise<Record<string, unknown>> {\r\n        const logger = this._logger.create(\"exchangeRefreshToken\");\r\n        if (!client_id) {\r\n            logger.throw(new Error(\"A client_id is required\"));\r\n        }\r\n        if (!args.refresh_token) {\r\n            logger.throw(new Error(\"A refresh_token is required\"));\r\n        }\r\n\r\n        const params = new URLSearchParams({ grant_type });\r\n        for (const [key, value] of Object.entries(args)) {\r\n            if (Array.isArray(value)) {\r\n                value.forEach(param => params.append(key, param));\r\n            }\r\n            else if (value != null) {\r\n                params.set(key, value);\r\n            }\r\n        }\r\n        let basicAuth: string | undefined;\r\n        switch (this._settings.client_authentication) {\r\n            case \"client_secret_basic\":\r\n                if (client_secret === undefined || client_secret === null) {\r\n                    logger.throw(new Error(\"A client_secret is required\"));\r\n                    // eslint-disable-next-line @typescript-eslint/only-throw-error\r\n                    throw null; // https://github.com/microsoft/TypeScript/issues/46972\r\n                }\r\n                basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\r\n                break;\r\n            case \"client_secret_post\":\r\n                params.append(\"client_id\", client_id);\r\n                if (client_secret) {\r\n                    params.append(\"client_secret\", client_secret);\r\n                }\r\n                break;\r\n        }\r\n\r\n        const url = await this._metadataService.getTokenEndpoint(false);\r\n        logger.debug(\"got token endpoint\");\r\n\r\n        const response = await this._jsonService.postForm(url, { body: params, basicAuth, timeoutInSeconds, initCredentials: this._settings.fetchRequestCredentials, extraHeaders });\r\n        logger.debug(\"got response\");\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Revoke an access or refresh token.\r\n     *\r\n     * @see https://datatracker.ietf.org/doc/html/rfc7009#section-2.1\r\n     */\r\n    public async revoke(args: RevokeArgs): Promise<void> {\r\n        const logger = this._logger.create(\"revoke\");\r\n        if (!args.token) {\r\n            logger.throw(new Error(\"A token is required\"));\r\n        }\r\n\r\n        const url = await this._metadataService.getRevocationEndpoint(false);\r\n\r\n        logger.debug(`got revocation endpoint, revoking ${args.token_type_hint ?? \"default token type\"}`);\r\n\r\n        const params = new URLSearchParams();\r\n        for (const [key, value] of Object.entries(args)) {\r\n            if (value != null) {\r\n                params.set(key, value);\r\n            }\r\n        }\r\n        params.set(\"client_id\", this._settings.client_id);\r\n        if (this._settings.client_secret) {\r\n            params.set(\"client_secret\", this._settings.client_secret);\r\n        }\r\n\r\n        await this._jsonService.postForm(url, { body: params, timeoutInSeconds: this._settings.requestTimeoutInSeconds });\r\n        logger.debug(\"got response\");\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger, JwtUtils } from \"./utils\";\r\nimport { ErrorResponse } from \"./errors\";\r\nimport type { MetadataService } from \"./MetadataService\";\r\nimport { UserInfoService } from \"./UserInfoService\";\r\nimport { TokenClient } from \"./TokenClient\";\r\nimport type { ExtraHeader, OidcClientSettingsStore } from \"./OidcClientSettings\";\r\nimport type { SigninState } from \"./SigninState\";\r\nimport type { SigninResponse } from \"./SigninResponse\";\r\nimport type { State } from \"./State\";\r\nimport type { SignoutResponse } from \"./SignoutResponse\";\r\nimport type { UserProfile } from \"./User\";\r\nimport type { RefreshState } from \"./RefreshState\";\r\nimport type { IdTokenClaims } from \"./Claims\";\r\nimport type { ClaimsService } from \"./ClaimsService\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ResponseValidator {\r\n    protected readonly _logger = new Logger(\"ResponseValidator\");\r\n    protected readonly _userInfoService: UserInfoService;\r\n    protected readonly _tokenClient: TokenClient;\r\n\r\n    public constructor(\r\n        protected readonly _settings: OidcClientSettingsStore,\r\n        protected readonly _metadataService: MetadataService,\r\n        protected readonly _claimsService: ClaimsService,\r\n    ) {\r\n        this._userInfoService = new UserInfoService(this._settings, this._metadataService);\r\n        this._tokenClient = new TokenClient(this._settings, this._metadataService);\r\n    }\r\n\r\n    public async validateSigninResponse(response: SigninResponse, state: SigninState, extraHeaders?: Record<string, ExtraHeader>): Promise<void> {\r\n        const logger = this._logger.create(\"validateSigninResponse\");\r\n\r\n        this._processSigninState(response, state);\r\n        logger.debug(\"state processed\");\r\n\r\n        await this._processCode(response, state, extraHeaders);\r\n        logger.debug(\"code processed\");\r\n\r\n        if (response.isOpenId) {\r\n            this._validateIdTokenAttributes(response);\r\n        }\r\n        logger.debug(\"tokens validated\");\r\n\r\n        await this._processClaims(response, state?.skipUserInfo, response.isOpenId);\r\n        logger.debug(\"claims processed\");\r\n    }\r\n\r\n    public async validateCredentialsResponse(response: SigninResponse, skipUserInfo: boolean): Promise<void> {\r\n        const logger = this._logger.create(\"validateCredentialsResponse\");\r\n\r\n        if (response.isOpenId && !!response.id_token) {\r\n            this._validateIdTokenAttributes(response);\r\n        }\r\n        logger.debug(\"tokens validated\");\r\n\r\n        await this._processClaims(response, skipUserInfo, response.isOpenId);\r\n        logger.debug(\"claims processed\");\r\n    }\r\n\r\n    public async validateRefreshResponse(response: SigninResponse, state: RefreshState): Promise<void> {\r\n        const logger = this._logger.create(\"validateRefreshResponse\");\r\n\r\n        response.userState = state.data;\r\n        // if there's no session_state on the response, copy over session_state from original request\r\n        response.session_state ??= state.session_state;\r\n        // if there's no scope on the response, then assume all scopes granted (per-spec) and copy over scopes from original request\r\n        response.scope ??= state.scope;\r\n\r\n        // OpenID Connect Core 1.0 says that id_token is optional in refresh response:\r\n        // https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokenResponse\r\n        if (response.isOpenId && !!response.id_token) {\r\n            this._validateIdTokenAttributes(response, state.id_token);\r\n            logger.debug(\"ID Token validated\");\r\n        }\r\n\r\n        if (!response.id_token) {\r\n            // if there's no id_token on the response, copy over id_token from original request\r\n            response.id_token = state.id_token;\r\n            // and decoded part too\r\n            response.profile = state.profile;\r\n        }\r\n\r\n        const hasIdToken = response.isOpenId && !!response.id_token;\r\n        await this._processClaims(response, false, hasIdToken);\r\n        logger.debug(\"claims processed\");\r\n    }\r\n\r\n    public validateSignoutResponse(response: SignoutResponse, state: State): void {\r\n        const logger = this._logger.create(\"validateSignoutResponse\");\r\n        if (state.id !== response.state) {\r\n            logger.throw(new Error(\"State does not match\"));\r\n        }\r\n\r\n        // now that we know the state matches, take the stored data\r\n        // and set it into the response so callers can get their state\r\n        // this is important for both success & error outcomes\r\n        logger.debug(\"state validated\");\r\n        response.userState = state.data;\r\n\r\n        if (response.error) {\r\n            logger.warn(\"Response was error\", response.error);\r\n            throw new ErrorResponse(response);\r\n        }\r\n    }\r\n\r\n    protected _processSigninState(response: SigninResponse, state: SigninState): void {\r\n        const logger = this._logger.create(\"_processSigninState\");\r\n        if (state.id !== response.state) {\r\n            logger.throw(new Error(\"State does not match\"));\r\n        }\r\n\r\n        if (!state.client_id) {\r\n            logger.throw(new Error(\"No client_id on state\"));\r\n        }\r\n\r\n        if (!state.authority) {\r\n            logger.throw(new Error(\"No authority on state\"));\r\n        }\r\n\r\n        // ensure we're using the correct authority\r\n        if (this._settings.authority !== state.authority) {\r\n            logger.throw(new Error(\"authority mismatch on settings vs. signin state\"));\r\n        }\r\n        if (this._settings.client_id && this._settings.client_id !== state.client_id) {\r\n            logger.throw(new Error(\"client_id mismatch on settings vs. signin state\"));\r\n        }\r\n\r\n        // now that we know the state matches, take the stored data\r\n        // and set it into the response so callers can get their state\r\n        // this is important for both success & error outcomes\r\n        logger.debug(\"state validated\");\r\n        response.userState = state.data;\r\n        response.url_state = state.url_state;\r\n        // if there's no scope on the response, then assume all scopes granted (per-spec) and copy over scopes from original request\r\n        response.scope ??= state.scope;\r\n\r\n        if (response.error) {\r\n            logger.warn(\"Response was error\", response.error);\r\n            throw new ErrorResponse(response);\r\n        }\r\n\r\n        if (state.code_verifier && !response.code) {\r\n            logger.throw(new Error(\"Expected code in response\"));\r\n        }\r\n\r\n    }\r\n\r\n    protected async _processClaims(response: SigninResponse, skipUserInfo = false, validateSub = true): Promise<void> {\r\n        const logger = this._logger.create(\"_processClaims\");\r\n        response.profile = this._claimsService.filterProtocolClaims(response.profile);\r\n\r\n        if (skipUserInfo || !this._settings.loadUserInfo || !response.access_token) {\r\n            logger.debug(\"not loading user info\");\r\n            return;\r\n        }\r\n\r\n        logger.debug(\"loading user info\");\r\n        const claims = await this._userInfoService.getClaims(response.access_token);\r\n        logger.debug(\"user info claims received from user info endpoint\");\r\n\r\n        if (validateSub && claims.sub !== response.profile.sub) {\r\n            logger.throw(new Error(\"subject from UserInfo response does not match subject in ID Token\"));\r\n        }\r\n\r\n        response.profile = this._claimsService.mergeClaims(response.profile, this._claimsService.filterProtocolClaims(claims as IdTokenClaims));\r\n        logger.debug(\"user info claims received, updated profile:\", response.profile);\r\n    }\r\n\r\n    protected async _processCode(response: SigninResponse, state: SigninState, extraHeaders?: Record<string, ExtraHeader>): Promise<void> {\r\n        const logger = this._logger.create(\"_processCode\");\r\n        if (response.code) {\r\n            logger.debug(\"Validating code\");\r\n            const tokenResponse = await this._tokenClient.exchangeCode({\r\n                client_id: state.client_id,\r\n                client_secret: state.client_secret,\r\n                code: response.code,\r\n                redirect_uri: state.redirect_uri,\r\n                code_verifier: state.code_verifier,\r\n                extraHeaders: extraHeaders,\r\n                ...state.extraTokenParams,\r\n            });\r\n            Object.assign(response, tokenResponse);\r\n        } else {\r\n            logger.debug(\"No code to process\");\r\n        }\r\n    }\r\n\r\n    protected _validateIdTokenAttributes(response: SigninResponse, existingToken?: string): void {\r\n        const logger = this._logger.create(\"_validateIdTokenAttributes\");\r\n\r\n        logger.debug(\"decoding ID Token JWT\");\r\n        const incoming = JwtUtils.decode(response.id_token ?? \"\");\r\n\r\n        if (!incoming.sub) {\r\n            logger.throw(new Error(\"ID Token is missing a subject claim\"));\r\n        }\r\n\r\n        if (existingToken) {\r\n            const existing = JwtUtils.decode(existingToken);\r\n            if (incoming.sub !== existing.sub) {\r\n                logger.throw(new Error(\"sub in id_token does not match current sub\"));\r\n            }\r\n            if (incoming.auth_time && incoming.auth_time !== existing.auth_time) {\r\n                logger.throw(new Error(\"auth_time in id_token does not match original auth_time\"));\r\n            }\r\n            if (incoming.azp && incoming.azp !== existing.azp) {\r\n                logger.throw(new Error(\"azp in id_token does not match original azp\"));\r\n            }\r\n            if (!incoming.azp && existing.azp) {\r\n                logger.throw(new Error(\"azp not in id_token, but present in original id_token\"));\r\n            }\r\n        }\r\n\r\n        response.profile = incoming as UserProfile;\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger, CryptoUtils, Timer } from \"./utils\";\r\nimport type { StateStore } from \"./StateStore\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class State {\r\n    public readonly id: string;\r\n    public readonly created: number;\r\n    public readonly request_type: string | undefined;\r\n    public readonly url_state: string | undefined;\r\n\r\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\r\n    public readonly data?: unknown;\r\n\r\n    public constructor(args: {\r\n        id?: string;\r\n        data?: unknown;\r\n        created?: number;\r\n        request_type?: string;\r\n        url_state?: string;\r\n    }) {\r\n        this.id = args.id || CryptoUtils.generateUUIDv4();\r\n        this.data = args.data;\r\n\r\n        if (args.created && args.created > 0) {\r\n            this.created = args.created;\r\n        }\r\n        else {\r\n            this.created = Timer.getEpochTime();\r\n        }\r\n        this.request_type = args.request_type;\r\n        this.url_state = args.url_state;\r\n    }\r\n\r\n    public toStorageString(): string {\r\n        new Logger(\"State\").create(\"toStorageString\");\r\n        return JSON.stringify({\r\n            id: this.id,\r\n            data: this.data,\r\n            created: this.created,\r\n            request_type: this.request_type,\r\n            url_state: this.url_state,\r\n        });\r\n    }\r\n\r\n    public static fromStorageString(storageString: string): Promise<State> {\r\n        Logger.createStatic(\"State\", \"fromStorageString\");\r\n        return Promise.resolve(new State(JSON.parse(storageString)));\r\n    }\r\n\r\n    public static async clearStaleState(storage: StateStore, age: number): Promise<void> {\r\n        const logger = Logger.createStatic(\"State\", \"clearStaleState\");\r\n        const cutoff = Timer.getEpochTime() - age;\r\n\r\n        const keys = await storage.getAllKeys();\r\n        logger.debug(\"got keys\", keys);\r\n\r\n        for (let i = 0; i < keys.length; i++) {\r\n            const key = keys[i];\r\n            const item = await storage.get(key);\r\n            let remove = false;\r\n\r\n            if (item) {\r\n                try {\r\n                    const state = await State.fromStorageString(item);\r\n\r\n                    logger.debug(\"got item from key:\", key, state.created);\r\n                    if (state.created <= cutoff) {\r\n                        remove = true;\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    logger.error(\"Error parsing state for key:\", key, err);\r\n                    remove = true;\r\n                }\r\n            }\r\n            else {\r\n                logger.debug(\"no item in storage for key:\", key);\r\n                remove = true;\r\n            }\r\n\r\n            if (remove) {\r\n                logger.debug(\"removed item for key:\", key);\r\n                void storage.remove(key);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger, CryptoUtils } from \"./utils\";\r\nimport { State } from \"./State\";\r\n\r\n/** @public */\r\nexport interface SigninStateArgs {\r\n    id?: string;\r\n    data?: unknown;\r\n    created?: number;\r\n    request_type?: string;\r\n\r\n    code_verifier?: string;\r\n    code_challenge?: string;\r\n    authority: string;\r\n    client_id: string;\r\n    redirect_uri: string;\r\n    scope: string;\r\n    client_secret?: string;\r\n    extraTokenParams?: Record<string, unknown>;\r\n    response_mode?: \"query\" | \"fragment\";\r\n    skipUserInfo?: boolean;\r\n    url_state?: string;\r\n}\r\n\r\n/** @public */\r\nexport type SigninStateCreateArgs = Omit<SigninStateArgs, \"code_verifier\"> & {\r\n    code_verifier?: string | boolean;\r\n};\r\n\r\n/**\r\n * @public\r\n */\r\nexport class SigninState extends State {\r\n    // isCode\r\n    /** The same code_verifier that was used to obtain the authorization_code via PKCE. */\r\n    public readonly code_verifier: string | undefined;\r\n    /** Used to secure authorization code grants via Proof Key for Code Exchange (PKCE). */\r\n    public readonly code_challenge: string | undefined;\r\n\r\n    // to ensure state still matches settings\r\n    /** @see {@link OidcClientSettings.authority} */\r\n    public readonly authority: string;\r\n    /** @see {@link OidcClientSettings.client_id} */\r\n    public readonly client_id: string;\r\n    /** @see {@link OidcClientSettings.redirect_uri} */\r\n    public readonly redirect_uri: string;\r\n    /** @see {@link OidcClientSettings.scope} */\r\n    public readonly scope: string;\r\n    /** @see {@link OidcClientSettings.client_secret} */\r\n    public readonly client_secret: string | undefined;\r\n    /** @see {@link OidcClientSettings.extraTokenParams} */\r\n    public readonly extraTokenParams: Record<string, unknown> | undefined;\r\n    /** @see {@link OidcClientSettings.response_mode} */\r\n    public readonly response_mode: \"query\" | \"fragment\" | undefined;\r\n\r\n    public readonly skipUserInfo: boolean | undefined;\r\n\r\n    private constructor(args: SigninStateArgs) {\r\n        super(args);\r\n\r\n        this.code_verifier = args.code_verifier;\r\n        this.code_challenge = args.code_challenge;\r\n        this.authority = args.authority;\r\n        this.client_id = args.client_id;\r\n        this.redirect_uri = args.redirect_uri;\r\n        this.scope = args.scope;\r\n        this.client_secret = args.client_secret;\r\n        this.extraTokenParams = args.extraTokenParams;\r\n\r\n        this.response_mode = args.response_mode;\r\n        this.skipUserInfo = args.skipUserInfo;\r\n    }\r\n\r\n    public static async create(args: SigninStateCreateArgs): Promise<SigninState> {\r\n        const code_verifier = args.code_verifier === true ? CryptoUtils.generateCodeVerifier() : (args.code_verifier || undefined);\r\n        const code_challenge = code_verifier ? (await CryptoUtils.generateCodeChallenge(code_verifier)) : undefined;\r\n\r\n        return new SigninState({\r\n            ...args,\r\n            code_verifier,\r\n            code_challenge,\r\n        });\r\n    }\r\n\r\n    public toStorageString(): string {\r\n        new Logger(\"SigninState\").create(\"toStorageString\");\r\n        return JSON.stringify({\r\n            id: this.id,\r\n            data: this.data,\r\n            created: this.created,\r\n            request_type: this.request_type,\r\n            url_state: this.url_state,\r\n\r\n            code_verifier: this.code_verifier,\r\n            authority: this.authority,\r\n            client_id: this.client_id,\r\n            redirect_uri: this.redirect_uri,\r\n            scope: this.scope,\r\n            client_secret: this.client_secret,\r\n            extraTokenParams : this.extraTokenParams,\r\n            response_mode: this.response_mode,\r\n            skipUserInfo: this.skipUserInfo,\r\n        });\r\n    }\r\n\r\n    public static fromStorageString(storageString: string): Promise<SigninState> {\r\n        Logger.createStatic(\"SigninState\", \"fromStorageString\");\r\n        const data = JSON.parse(storageString);\r\n        return SigninState.create(data);\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger, URL_STATE_DELIMITER } from \"./utils\";\r\nimport { SigninState } from \"./SigninState\";\r\n\r\n/**\r\n * @public\r\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n */\r\nexport interface SigninRequestCreateArgs {\r\n    // mandatory\r\n    url: string;\r\n    authority: string;\r\n    client_id: string;\r\n    redirect_uri: string;\r\n    response_type: string;\r\n    scope: string;\r\n\r\n    // optional\r\n    response_mode?: \"query\" | \"fragment\";\r\n    nonce?: string;\r\n    display?: string;\r\n    dpopJkt?: string;\r\n    prompt?: string;\r\n    max_age?: number;\r\n    ui_locales?: string;\r\n    id_token_hint?: string;\r\n    login_hint?: string;\r\n    acr_values?: string;\r\n\r\n    // other\r\n    resource?: string | string[];\r\n    request?: string;\r\n    request_uri?: string;\r\n    request_type?: string;\r\n    extraQueryParams?: Record<string, string | number | boolean>;\r\n\r\n    // special\r\n    extraTokenParams?: Record<string, unknown>;\r\n    client_secret?: string;\r\n    skipUserInfo?: boolean;\r\n    disablePKCE?: boolean;\r\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\r\n    state_data?: unknown;\r\n    url_state?: string;\r\n    omitScopeWhenRequesting?: boolean;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class SigninRequest {\r\n    private static readonly _logger = new Logger(\"SigninRequest\");\r\n\r\n    public readonly url: string;\r\n    public readonly state: SigninState;\r\n\r\n    private constructor(args: {\r\n        url: string;\r\n        state: SigninState;\r\n    }) {\r\n        this.url = args.url;\r\n        this.state = args.state;\r\n    }\r\n\r\n    public static async create({\r\n        // mandatory\r\n        url, authority, client_id, redirect_uri, response_type, scope,\r\n        // optional\r\n        state_data, response_mode, request_type, client_secret, nonce, url_state,\r\n        resource,\r\n        skipUserInfo,\r\n        extraQueryParams,\r\n        extraTokenParams,\r\n        disablePKCE,\r\n        dpopJkt,\r\n        omitScopeWhenRequesting,\r\n        ...optionalParams\r\n    }: SigninRequestCreateArgs): Promise<SigninRequest> {\r\n        if (!url) {\r\n            this._logger.error(\"create: No url passed\");\r\n            throw new Error(\"url\");\r\n        }\r\n        if (!client_id) {\r\n            this._logger.error(\"create: No client_id passed\");\r\n            throw new Error(\"client_id\");\r\n        }\r\n        if (!redirect_uri) {\r\n            this._logger.error(\"create: No redirect_uri passed\");\r\n            throw new Error(\"redirect_uri\");\r\n        }\r\n        if (!response_type) {\r\n            this._logger.error(\"create: No response_type passed\");\r\n            throw new Error(\"response_type\");\r\n        }\r\n        if (!scope) {\r\n            this._logger.error(\"create: No scope passed\");\r\n            throw new Error(\"scope\");\r\n        }\r\n        if (!authority) {\r\n            this._logger.error(\"create: No authority passed\");\r\n            throw new Error(\"authority\");\r\n        }\r\n\r\n        const state = await SigninState.create({\r\n            data: state_data,\r\n            request_type,\r\n            url_state,\r\n            code_verifier: !disablePKCE,\r\n            client_id, authority, redirect_uri,\r\n            response_mode,\r\n            client_secret, scope, extraTokenParams,\r\n            skipUserInfo,\r\n        });\r\n\r\n        const parsedUrl = new URL(url);\r\n        parsedUrl.searchParams.append(\"client_id\", client_id);\r\n        parsedUrl.searchParams.append(\"redirect_uri\", redirect_uri);\r\n        parsedUrl.searchParams.append(\"response_type\", response_type);\r\n        if (!omitScopeWhenRequesting) {\r\n            parsedUrl.searchParams.append(\"scope\", scope);\r\n        }\r\n        if (nonce) {\r\n            parsedUrl.searchParams.append(\"nonce\", nonce);\r\n        }\r\n\r\n        if (dpopJkt) {\r\n            parsedUrl.searchParams.append(\"dpop_jkt\", dpopJkt);\r\n        }\r\n\r\n        let stateParam = state.id;\r\n        if (url_state) {\r\n            stateParam = `${stateParam}${URL_STATE_DELIMITER}${url_state}`;\r\n        }\r\n        parsedUrl.searchParams.append(\"state\", stateParam);\r\n        if (state.code_challenge) {\r\n            parsedUrl.searchParams.append(\"code_challenge\", state.code_challenge);\r\n            parsedUrl.searchParams.append(\"code_challenge_method\", \"S256\");\r\n        }\r\n\r\n        if (resource) {\r\n            // https://datatracker.ietf.org/doc/html/rfc8707\r\n            const resources = Array.isArray(resource) ? resource : [resource];\r\n            resources\r\n                .forEach(r => parsedUrl.searchParams.append(\"resource\", r));\r\n        }\r\n\r\n        for (const [key, value] of Object.entries({ response_mode, ...optionalParams, ...extraQueryParams })) {\r\n            if (value != null) {\r\n                parsedUrl.searchParams.append(key, value.toString());\r\n            }\r\n        }\r\n\r\n        return new SigninRequest({\r\n            url: parsedUrl.href,\r\n            state,\r\n        });\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Timer, URL_STATE_DELIMITER } from \"./utils\";\r\nimport type { UserProfile } from \"./User\";\r\n\r\nconst OidcScope = \"openid\";\r\n\r\n/**\r\n * @public\r\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthResponse\r\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthError\r\n */\r\nexport class SigninResponse {\r\n    // props present in the initial callback response regardless of success\r\n    public readonly state: string | null;\r\n    /** @see {@link User.session_state} */\r\n    public session_state: string | null;\r\n\r\n    // error props\r\n    /** @see {@link ErrorResponse.error} */\r\n    public readonly error: string | null;\r\n    /** @see {@link ErrorResponse.error_description} */\r\n    public readonly error_description: string | null;\r\n    /** @see {@link ErrorResponse.error_uri} */\r\n    public readonly error_uri: string | null;\r\n\r\n    // success props\r\n    public readonly code: string | null;\r\n\r\n    // props set after validation\r\n    /** @see {@link User.id_token} */\r\n    public id_token?: string;\r\n    /** @see {@link User.access_token} */\r\n    public access_token = \"\";\r\n    /** @see {@link User.token_type} */\r\n    public token_type = \"\";\r\n    /** @see {@link User.refresh_token} */\r\n    public refresh_token?: string;\r\n    /** @see {@link User.scope} */\r\n    public scope?: string;\r\n    /** @see {@link User.expires_at} */\r\n    public expires_at?: number;\r\n\r\n    /** custom state data set during the initial signin request */\r\n    public userState: unknown;\r\n    public url_state?: string;\r\n\r\n    /** @see {@link User.profile} */\r\n    public profile: UserProfile = {} as UserProfile;\r\n\r\n    public constructor(params: URLSearchParams) {\r\n        this.state = params.get(\"state\");\r\n        this.session_state = params.get(\"session_state\");\r\n        if (this.state) {\r\n            const splitState = decodeURIComponent(this.state).split(URL_STATE_DELIMITER);\r\n            this.state = splitState[0];\r\n            if (splitState.length > 1) {\r\n                this.url_state = splitState.slice(1).join(URL_STATE_DELIMITER);\r\n            }\r\n        }\r\n\r\n        this.error = params.get(\"error\");\r\n        this.error_description = params.get(\"error_description\");\r\n        this.error_uri = params.get(\"error_uri\");\r\n\r\n        this.code = params.get(\"code\");\r\n    }\r\n\r\n    public get expires_in(): number | undefined {\r\n        if (this.expires_at === undefined) {\r\n            return undefined;\r\n        }\r\n        return this.expires_at - Timer.getEpochTime();\r\n    }\r\n    public set expires_in(value: number | undefined) {\r\n        // spec expects a number, but normalize here just in case\r\n        if (typeof value === \"string\") value = Number(value);\r\n        if (value !== undefined && value >= 0) {\r\n            this.expires_at = Math.floor(value) + Timer.getEpochTime();\r\n        }\r\n    }\r\n\r\n    public get isOpenId(): boolean {\r\n        return this.scope?.split(\" \").includes(OidcScope) || !!this.id_token;\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger } from \"./utils\";\r\nimport { State } from \"./State\";\r\n\r\n/**\r\n * @public\r\n * @see https://openid.net/specs/openid-connect-rpinitiated-1_0.html#RPLogout\r\n */\r\nexport interface SignoutRequestArgs {\r\n    // mandatory\r\n    url: string;\r\n\r\n    // optional\r\n    id_token_hint?: string;\r\n    client_id?: string;\r\n    post_logout_redirect_uri?: string;\r\n    extraQueryParams?: Record<string, string | number | boolean>;\r\n\r\n    // special\r\n    request_type?: string;\r\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\r\n    state_data?: unknown;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class SignoutRequest {\r\n    private readonly _logger = new Logger(\"SignoutRequest\");\r\n\r\n    public readonly url: string;\r\n    public readonly state?: State;\r\n\r\n    public constructor({\r\n        url,\r\n        state_data, id_token_hint, post_logout_redirect_uri, extraQueryParams, request_type, client_id,\r\n    }: SignoutRequestArgs) {\r\n        if (!url) {\r\n            this._logger.error(\"ctor: No url passed\");\r\n            throw new Error(\"url\");\r\n        }\r\n\r\n        const parsedUrl = new URL(url);\r\n        if (id_token_hint) {\r\n            parsedUrl.searchParams.append(\"id_token_hint\", id_token_hint);\r\n        }\r\n        if (client_id) {\r\n            parsedUrl.searchParams.append(\"client_id\", client_id);\r\n        }\r\n\r\n        if (post_logout_redirect_uri) {\r\n            parsedUrl.searchParams.append(\"post_logout_redirect_uri\", post_logout_redirect_uri);\r\n\r\n            if (state_data) {\r\n                this.state = new State({ data: state_data, request_type });\r\n\r\n                parsedUrl.searchParams.append(\"state\", this.state.id);\r\n            }\r\n        }\r\n\r\n        for (const [key, value] of Object.entries({ ...extraQueryParams })) {\r\n            if (value != null) {\r\n                parsedUrl.searchParams.append(key, value.toString());\r\n            }\r\n        }\r\n\r\n        this.url = parsedUrl.href;\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\n/**\r\n * @public\r\n * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthError\r\n */\r\nexport class SignoutResponse {\r\n    public readonly state: string | null;\r\n\r\n    // error props\r\n    /** @see {@link ErrorResponse.error} */\r\n    public error: string | null;\r\n    /** @see {@link ErrorResponse.error_description} */\r\n    public error_description: string | null;\r\n    /** @see {@link ErrorResponse.error_uri} */\r\n    public error_uri: string | null;\r\n\r\n    /** custom state data set during the initial signin request */\r\n    public userState: unknown;\r\n\r\n    public constructor(params: URLSearchParams) {\r\n        this.state = params.get(\"state\");\r\n\r\n        this.error = params.get(\"error\");\r\n        this.error_description = params.get(\"error_description\");\r\n        this.error_uri = params.get(\"error_uri\");\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport type { JwtClaims } from \"./Claims\";\r\nimport type { OidcClientSettingsStore } from \"./OidcClientSettings\";\r\nimport type { UserProfile } from \"./User\";\r\nimport { Logger } from \"./utils\";\r\n\r\n/**\r\n * Protocol claims that could be removed by default from profile.\r\n * Derived from the following sets of claims:\r\n * - {@link https://datatracker.ietf.org/doc/html/rfc7519.html#section-4.1}\r\n * - {@link https://openid.net/specs/openid-connect-core-1_0.html#IDToken}\r\n * - {@link https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken}\r\n *\r\n * @internal\r\n */\r\nconst DefaultProtocolClaims = [\r\n    \"nbf\",\r\n    \"jti\",\r\n    \"auth_time\",\r\n    \"nonce\",\r\n    \"acr\",\r\n    \"amr\",\r\n    \"azp\",\r\n    \"at_hash\", // https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken\r\n] as const;\r\n\r\n/**\r\n * Protocol claims that should never be removed from profile.\r\n * \"sub\" is needed internally and others should remain required as per the OIDC specs.\r\n *\r\n * @internal\r\n */\r\nconst InternalRequiredProtocolClaims = [\"sub\", \"iss\", \"aud\", \"exp\", \"iat\"];\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ClaimsService {\r\n    protected readonly _logger = new Logger(\"ClaimsService\");\r\n    public constructor(\r\n        protected readonly _settings: OidcClientSettingsStore,\r\n    ) {}\r\n\r\n    public filterProtocolClaims(claims: UserProfile): UserProfile {\r\n        const result = { ...claims };\r\n\r\n        if (this._settings.filterProtocolClaims) {\r\n            let protocolClaims;\r\n            if (Array.isArray(this._settings.filterProtocolClaims)) {\r\n                protocolClaims = this._settings.filterProtocolClaims;\r\n            } else {\r\n                protocolClaims = DefaultProtocolClaims;\r\n            }\r\n\r\n            for (const claim of protocolClaims) {\r\n                if (!InternalRequiredProtocolClaims.includes(claim)) {\r\n                    delete result[claim];\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public mergeClaims(claims1: JwtClaims, claims2: JwtClaims): UserProfile;\r\n    public mergeClaims(claims1: UserProfile, claims2: JwtClaims): UserProfile {\r\n        const result = { ...claims1 };\r\n        for (const [claim, values] of Object.entries(claims2)) {\r\n            if (result[claim] !== values) {\r\n                if (Array.isArray(result[claim]) || Array.isArray(values)) {\r\n                    if (this._settings.mergeClaimsStrategy.array == \"replace\") {\r\n                        result[claim] = values;\r\n                    } else {\r\n                        const mergedValues = Array.isArray(result[claim]) ? result[claim] as unknown[] : [result[claim]];\r\n                        for (const value of Array.isArray(values) ? values : [values]) {\r\n                            if (!mergedValues.includes(value)) {\r\n                                mergedValues.push(value);\r\n                            }\r\n                        }\r\n                        result[claim] = mergedValues;\r\n                    }\r\n                } else if (typeof result[claim] === \"object\" && typeof values === \"object\") {\r\n                    result[claim] = this.mergeClaims(result[claim] as JwtClaims, values as JwtClaims);\r\n                } else {\r\n                    result[claim] = values;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "/**\r\n * @public\r\n */\r\nexport interface DPoPStore {\r\n    set(key: string, value: DPoPState): Promise<void>;\r\n    get(key: string): Promise<DPoPState>;\r\n    remove(key: string): Promise<DPoPState>;\r\n    getAllKeys(): Promise<string[]>;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class DPoPState {\r\n    public constructor(\r\n        public readonly keys: CryptoKeyPair,\r\n        public nonce?: string,\r\n    ) { }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { CryptoUtils, Logger, UrlUtils } from \"./utils\";\r\nimport { ErrorResponse } from \"./errors\";\r\nimport { type ExtraHeader, type OidcClientSettings, OidcClientSettingsStore } from \"./OidcClientSettings\";\r\nimport { ResponseValidator } from \"./ResponseValidator\";\r\nimport { MetadataService } from \"./MetadataService\";\r\nimport type { RefreshState } from \"./RefreshState\";\r\nimport { SigninRequest, type SigninRequestCreateArgs } from \"./SigninRequest\";\r\nimport { SigninResponse } from \"./SigninResponse\";\r\nimport { SignoutRequest, type SignoutRequestArgs } from \"./SignoutRequest\";\r\nimport { SignoutResponse } from \"./SignoutResponse\";\r\nimport { SigninState } from \"./SigninState\";\r\nimport { State } from \"./State\";\r\nimport { TokenClient } from \"./TokenClient\";\r\nimport { ClaimsService } from \"./ClaimsService\";\r\nimport { DPoPState, type DPoPStore } from \"./DPoPStore\";\r\nimport { ErrorDPoPNonce } from \"./errors/ErrorDPoPNonce\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface CreateSigninRequestArgs\r\n    extends Omit<SigninRequestCreateArgs, \"url\" | \"authority\" | \"client_id\" | \"redirect_uri\" | \"response_type\" | \"scope\" | \"state_data\"> {\r\n    redirect_uri?: string;\r\n    response_type?: string;\r\n    scope?: string;\r\n    dpopJkt?: string;\r\n\r\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\r\n    state?: unknown;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface UseRefreshTokenArgs {\r\n    redirect_uri?: string;\r\n    resource?: string | string[];\r\n    extraTokenParams?: Record<string, unknown>;\r\n    timeoutInSeconds?: number;\r\n\r\n    state: RefreshState;\r\n\r\n    extraHeaders?: Record<string, ExtraHeader>;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport type CreateSignoutRequestArgs = Omit<SignoutRequestArgs, \"url\" | \"state_data\"> & {\r\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\r\n    state?: unknown;\r\n};\r\n\r\n/**\r\n * @public\r\n */\r\nexport type ProcessResourceOwnerPasswordCredentialsArgs = {\r\n    username: string;\r\n    password: string;\r\n    skipUserInfo?: boolean;\r\n    extraTokenParams?: Record<string, unknown>;\r\n};\r\n\r\n/**\r\n * Provides the raw OIDC/OAuth2 protocol support for the authorization endpoint and the end session endpoint in the\r\n * authorization server. It provides a bare-bones protocol implementation and is used by the UserManager class.\r\n * Only use this class if you simply want protocol support without the additional management features of the\r\n * UserManager class.\r\n *\r\n * @public\r\n */\r\nexport class OidcClient {\r\n    public readonly settings: OidcClientSettingsStore;\r\n    protected readonly _logger = new Logger(\"OidcClient\");\r\n\r\n    public readonly metadataService: MetadataService;\r\n    protected readonly _claimsService: ClaimsService;\r\n    protected readonly _validator: ResponseValidator;\r\n    protected readonly _tokenClient: TokenClient;\r\n\r\n    public constructor(settings: OidcClientSettings);\r\n    public constructor(settings: OidcClientSettingsStore, metadataService: MetadataService);\r\n    public constructor(settings: OidcClientSettings | OidcClientSettingsStore, metadataService?: MetadataService) {\r\n        this.settings = settings instanceof OidcClientSettingsStore ? settings : new OidcClientSettingsStore(settings);\r\n\r\n        this.metadataService = metadataService ?? new MetadataService(this.settings);\r\n        this._claimsService = new ClaimsService(this.settings);\r\n        this._validator = new ResponseValidator(this.settings, this.metadataService, this._claimsService);\r\n        this._tokenClient = new TokenClient(this.settings, this.metadataService);\r\n    }\r\n\r\n    public async createSigninRequest({\r\n        state,\r\n        request,\r\n        request_uri,\r\n        request_type,\r\n        id_token_hint,\r\n        login_hint,\r\n        skipUserInfo,\r\n        nonce,\r\n        url_state,\r\n        response_type = this.settings.response_type,\r\n        scope = this.settings.scope,\r\n        redirect_uri = this.settings.redirect_uri,\r\n        prompt = this.settings.prompt,\r\n        display = this.settings.display,\r\n        max_age = this.settings.max_age,\r\n        ui_locales = this.settings.ui_locales,\r\n        acr_values = this.settings.acr_values,\r\n        resource = this.settings.resource,\r\n        response_mode = this.settings.response_mode,\r\n        extraQueryParams = this.settings.extraQueryParams,\r\n        extraTokenParams = this.settings.extraTokenParams,\r\n        dpopJkt,\r\n        omitScopeWhenRequesting = this.settings.omitScopeWhenRequesting,\r\n    }: CreateSigninRequestArgs): Promise<SigninRequest> {\r\n        const logger = this._logger.create(\"createSigninRequest\");\r\n\r\n        // if (response_type !== \"code\") {\r\n        //     throw new Error(\"Only the Authorization Code flow (with PKCE) is supported\");\r\n        // }\r\n\r\n        const url = await this.metadataService.getAuthorizationEndpoint();\r\n        logger.debug(\"Received authorization endpoint\", url);\r\n\r\n        const signinRequest = await SigninRequest.create({\r\n            url,\r\n            authority: this.settings.authority,\r\n            client_id: this.settings.client_id,\r\n            redirect_uri,\r\n            response_type,\r\n            scope,\r\n            state_data: state,\r\n            url_state,\r\n            prompt, display, max_age, ui_locales, id_token_hint, login_hint, acr_values, dpopJkt,\r\n            resource, request, request_uri, extraQueryParams, extraTokenParams, request_type, response_mode,\r\n            client_secret: this.settings.client_secret,\r\n            skipUserInfo,\r\n            nonce,\r\n            disablePKCE: this.settings.disablePKCE,\r\n            omitScopeWhenRequesting,\r\n        });\r\n\r\n        // house cleaning\r\n        await this.clearStaleState();\r\n\r\n        const signinState = signinRequest.state;\r\n        await this.settings.stateStore.set(signinState.id, signinState.toStorageString());\r\n        return signinRequest;\r\n    }\r\n\r\n    public async readSigninResponseState(url: string, removeState = false): Promise<{ state: SigninState; response: SigninResponse }> {\r\n        const logger = this._logger.create(\"readSigninResponseState\");\r\n\r\n        const response = new SigninResponse(UrlUtils.readParams(url, this.settings.response_mode));\r\n        if (!response.state) {\r\n            logger.throw(new Error(\"No state in response\"));\r\n            // need to throw within this function's body for type narrowing to work\r\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\r\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\r\n        }\r\n\r\n        const storedStateString = await this.settings.stateStore[removeState ? \"remove\" : \"get\"](response.state);\r\n        if (!storedStateString) {\r\n            logger.throw(new Error(\"No matching state found in storage\"));\r\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\r\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\r\n        }\r\n\r\n        const state = await SigninState.fromStorageString(storedStateString);\r\n        return { state, response };\r\n    }\r\n\r\n    public async processSigninResponse(url: string, extraHeaders?: Record<string, ExtraHeader>, removeState = true): Promise<SigninResponse> {\r\n        const logger = this._logger.create(\"processSigninResponse\");\r\n\r\n        const { state, response } = await this.readSigninResponseState(url, removeState);\r\n        logger.debug(\"received state from storage; validating response\");\r\n\r\n        if (this.settings.dpop && this.settings.dpop.store) {\r\n            const dpopProof = await this.getDpopProof(this.settings.dpop.store);\r\n            extraHeaders = { ...extraHeaders, \"DPoP\": dpopProof };\r\n        }\r\n\r\n        /**\r\n         * The DPoP spec describes a method for Authorization Servers to supply a nonce value\r\n         * in order to limit the lifetime of a given DPoP proof.\r\n         * See https://datatracker.ietf.org/doc/html/rfc9449#name-authorization-server-provid\r\n         * This involves the AS returning a 400 bad request with a DPoP-Nonce header containing\r\n         * the nonce value. The client must then retry the request with a recomputed DPoP proof\r\n         * containing the supplied nonce value.\r\n         */\r\n        try {\r\n            await this._validator.validateSigninResponse(response, state, extraHeaders);\r\n        }\r\n        catch (err) {\r\n            if (err instanceof ErrorDPoPNonce && this.settings.dpop) {\r\n                const dpopProof = await this.getDpopProof(this.settings.dpop.store, err.nonce);\r\n                extraHeaders![\"DPoP\"] = dpopProof;\r\n                await this._validator.validateSigninResponse(response, state, extraHeaders);\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    async getDpopProof(dpopStore: DPoPStore, nonce?: string): Promise<string> {\r\n        let keyPair: CryptoKeyPair;\r\n        let dpopState: DPoPState;\r\n\r\n        if (!(await dpopStore.getAllKeys()).includes(this.settings.client_id)) {\r\n            keyPair = await CryptoUtils.generateDPoPKeys();\r\n            dpopState = new DPoPState(keyPair, nonce);\r\n            await dpopStore.set(this.settings.client_id, dpopState);\r\n        } else {\r\n            dpopState = await dpopStore.get(this.settings.client_id);\r\n\r\n            // if the server supplied nonce has changed since the last request, update the nonce\r\n            if (dpopState.nonce !== nonce && nonce) {\r\n                dpopState.nonce = nonce;\r\n                await dpopStore.set(this.settings.client_id, dpopState);\r\n            }\r\n        }\r\n\r\n        return await CryptoUtils.generateDPoPProof({\r\n            url: await this.metadataService.getTokenEndpoint(false),\r\n            httpMethod: \"POST\",\r\n            keyPair: dpopState.keys,\r\n            nonce: dpopState.nonce,\r\n        });\r\n    }\r\n\r\n    public async processResourceOwnerPasswordCredentials({\r\n        username,\r\n        password,\r\n        skipUserInfo = false,\r\n        extraTokenParams = {},\r\n    }: ProcessResourceOwnerPasswordCredentialsArgs): Promise<SigninResponse> {\r\n        const tokenResponse: Record<string, unknown> = await this._tokenClient.exchangeCredentials({ username, password, ...extraTokenParams });\r\n        const signinResponse: SigninResponse = new SigninResponse(new URLSearchParams());\r\n        Object.assign(signinResponse, tokenResponse);\r\n        await this._validator.validateCredentialsResponse(signinResponse, skipUserInfo);\r\n        return signinResponse;\r\n    }\r\n\r\n    public async useRefreshToken({\r\n        state,\r\n        redirect_uri,\r\n        resource,\r\n        timeoutInSeconds,\r\n        extraHeaders,\r\n        extraTokenParams,\r\n    }: UseRefreshTokenArgs): Promise<SigninResponse> {\r\n        const logger = this._logger.create(\"useRefreshToken\");\r\n\r\n        // https://github.com/authts/oidc-client-ts/issues/695\r\n        // In some cases (e.g. AzureAD), not all granted scopes are allowed on token refresh requests.\r\n        // Therefore, we filter all granted scopes by a list of allowable scopes.\r\n        let scope;\r\n        if (this.settings.refreshTokenAllowedScope === undefined) {\r\n            scope = state.scope;\r\n        } else {\r\n            const allowableScopes = this.settings.refreshTokenAllowedScope.split(\" \");\r\n            const providedScopes = state.scope?.split(\" \") || [];\r\n\r\n            scope = providedScopes.filter(s => allowableScopes.includes(s)).join(\" \");\r\n        }\r\n\r\n        if (this.settings.dpop && this.settings.dpop.store) {\r\n            const dpopProof = await this.getDpopProof(this.settings.dpop.store);\r\n            extraHeaders = { ...extraHeaders, \"DPoP\": dpopProof };\r\n        }\r\n\r\n        /**\r\n         * The DPoP spec describes a method for Authorization Servers to supply a nonce value\r\n         * in order to limit the lifetime of a given DPoP proof.\r\n         * See https://datatracker.ietf.org/doc/html/rfc9449#name-authorization-server-provid\r\n         * This involves the AS returning a 400 bad request with a DPoP-Nonce header containing\r\n         * the nonce value. The client must then retry the request with a recomputed DPoP proof\r\n         * containing the supplied nonce value.\r\n         */\r\n        let result;\r\n        try {\r\n            result = await this._tokenClient.exchangeRefreshToken({\r\n                refresh_token: state.refresh_token,\r\n                // provide the (possible filtered) scope list\r\n                scope,\r\n                redirect_uri,\r\n                resource,\r\n                timeoutInSeconds,\r\n                extraHeaders,\r\n                ...extraTokenParams,\r\n            });\r\n        } catch (err) {\r\n            if (err instanceof ErrorDPoPNonce && this.settings.dpop) {\r\n                extraHeaders![\"DPoP\"] = await this.getDpopProof(this.settings.dpop.store, err.nonce);\r\n                result = await this._tokenClient.exchangeRefreshToken({\r\n                    refresh_token: state.refresh_token,\r\n                    // provide the (possible filtered) scope list\r\n                    scope,\r\n                    redirect_uri,\r\n                    resource,\r\n                    timeoutInSeconds,\r\n                    extraHeaders,\r\n                    ...extraTokenParams,\r\n                });\r\n            } else {\r\n                throw err;\r\n            }\r\n        }\r\n\r\n        const response = new SigninResponse(new URLSearchParams());\r\n        Object.assign(response, result);\r\n        logger.debug(\"validating response\", response);\r\n        await this._validator.validateRefreshResponse(response, {\r\n            ...state,\r\n            // override the scope in the state handed over to the validator\r\n            // so it can set the granted scope to the requested scope in case none is included in the response\r\n            scope,\r\n        });\r\n        return response;\r\n    }\r\n\r\n    public async createSignoutRequest({\r\n        state,\r\n        id_token_hint,\r\n        client_id,\r\n        request_type,\r\n        post_logout_redirect_uri = this.settings.post_logout_redirect_uri,\r\n        extraQueryParams = this.settings.extraQueryParams,\r\n    }: CreateSignoutRequestArgs = {}): Promise<SignoutRequest> {\r\n        const logger = this._logger.create(\"createSignoutRequest\");\r\n\r\n        const url = await this.metadataService.getEndSessionEndpoint();\r\n        if (!url) {\r\n            logger.throw(new Error(\"No end session endpoint\"));\r\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\r\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\r\n        }\r\n\r\n        logger.debug(\"Received end session endpoint\", url);\r\n\r\n        // specify the client identifier when post_logout_redirect_uri is used but id_token_hint is not\r\n        if (!client_id && post_logout_redirect_uri && !id_token_hint) {\r\n            client_id = this.settings.client_id;\r\n        }\r\n\r\n        const request = new SignoutRequest({\r\n            url,\r\n            id_token_hint,\r\n            client_id,\r\n            post_logout_redirect_uri,\r\n            state_data: state,\r\n            extraQueryParams,\r\n            request_type,\r\n        });\r\n\r\n        // house cleaning\r\n        await this.clearStaleState();\r\n\r\n        const signoutState = request.state;\r\n        if (signoutState) {\r\n            logger.debug(\"Signout request has state to persist\");\r\n            await this.settings.stateStore.set(signoutState.id, signoutState.toStorageString());\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    public async readSignoutResponseState(url: string, removeState = false): Promise<{ state: State | undefined; response: SignoutResponse }> {\r\n        const logger = this._logger.create(\"readSignoutResponseState\");\r\n\r\n        const response = new SignoutResponse(UrlUtils.readParams(url, this.settings.response_mode));\r\n        if (!response.state) {\r\n            logger.debug(\"No state in response\");\r\n\r\n            if (response.error) {\r\n                logger.warn(\"Response was error:\", response.error);\r\n                throw new ErrorResponse(response);\r\n            }\r\n\r\n            return { state: undefined, response };\r\n        }\r\n\r\n        const storedStateString = await this.settings.stateStore[removeState ? \"remove\" : \"get\"](response.state);\r\n        if (!storedStateString) {\r\n            logger.throw(new Error(\"No matching state found in storage\"));\r\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\r\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\r\n        }\r\n\r\n        const state = await State.fromStorageString(storedStateString);\r\n        return { state, response };\r\n    }\r\n\r\n    public async processSignoutResponse(url: string): Promise<SignoutResponse> {\r\n        const logger = this._logger.create(\"processSignoutResponse\");\r\n\r\n        const { state, response } = await this.readSignoutResponseState(url, true);\r\n        if (state) {\r\n            logger.debug(\"Received state from storage; validating response\");\r\n            this._validator.validateSignoutResponse(response, state);\r\n        } else {\r\n            logger.debug(\"No state from storage; skipping response validation\");\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    public clearStaleState(): Promise<void> {\r\n        this._logger.create(\"clearStaleState\");\r\n        return State.clearStaleState(this.settings.stateStore, this.settings.staleStateAgeInSeconds);\r\n    }\r\n\r\n    public async revokeToken(token: string, type?: \"access_token\" | \"refresh_token\"): Promise<void> {\r\n        this._logger.create(\"revokeToken\");\r\n        return await this._tokenClient.revoke({\r\n            token,\r\n            token_type_hint: type,\r\n        });\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger } from \"./utils\";\r\nimport { CheckSessionIFrame } from \"./CheckSessionIFrame\";\r\nimport type { UserManager } from \"./UserManager\";\r\nimport type { User } from \"./User\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport class SessionMonitor {\r\n    private readonly _logger = new Logger(\"SessionMonitor\");\r\n\r\n    private _sub: string | undefined;\r\n    private _checkSessionIFrame?: CheckSessionIFrame;\r\n\r\n    public constructor(private readonly _userManager: UserManager) {\r\n        if (!_userManager) {\r\n            this._logger.throw(new Error(\"No user manager passed\"));\r\n        }\r\n\r\n        this._userManager.events.addUserLoaded(this._start);\r\n        this._userManager.events.addUserUnloaded(this._stop);\r\n\r\n        this._init().catch((err: unknown) => {\r\n            // catch to suppress errors since we're in a ctor\r\n            this._logger.error(err);\r\n        });\r\n    }\r\n\r\n    protected async _init(): Promise<void> {\r\n        this._logger.create(\"_init\");\r\n        const user = await this._userManager.getUser();\r\n        // doing this manually here since calling getUser\r\n        // doesn't trigger load event.\r\n        if (user) {\r\n            void this._start(user);\r\n        }\r\n        else if (this._userManager.settings.monitorAnonymousSession) {\r\n            const session = await this._userManager.querySessionStatus();\r\n            if (session) {\r\n                const tmpUser = {\r\n                    session_state: session.session_state,\r\n                    profile: session.sub ? {\r\n                        sub: session.sub,\r\n                    } : null,\r\n                };\r\n                void this._start(tmpUser);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _start = async (\r\n        user: User | {\r\n            session_state: string;\r\n            profile: { sub: string } | null;\r\n        },\r\n    ): Promise<void> => {\r\n        const session_state = user.session_state;\r\n        if (!session_state) {\r\n            return;\r\n        }\r\n        const logger = this._logger.create(\"_start\");\r\n\r\n        if (user.profile) {\r\n            this._sub = user.profile.sub;\r\n            logger.debug(\"session_state\", session_state, \", sub\", this._sub);\r\n        }\r\n        else {\r\n            this._sub = undefined;\r\n            logger.debug(\"session_state\", session_state, \", anonymous user\");\r\n        }\r\n\r\n        if (this._checkSessionIFrame) {\r\n            this._checkSessionIFrame.start(session_state);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const url = await this._userManager.metadataService.getCheckSessionIframe();\r\n            if (url) {\r\n                logger.debug(\"initializing check session iframe\");\r\n\r\n                const client_id = this._userManager.settings.client_id;\r\n                const intervalInSeconds = this._userManager.settings.checkSessionIntervalInSeconds;\r\n                const stopOnError = this._userManager.settings.stopCheckSessionOnError;\r\n\r\n                const checkSessionIFrame = new CheckSessionIFrame(this._callback, client_id, url, intervalInSeconds, stopOnError);\r\n                await checkSessionIFrame.load();\r\n                this._checkSessionIFrame = checkSessionIFrame;\r\n                checkSessionIFrame.start(session_state);\r\n            }\r\n            else {\r\n                logger.warn(\"no check session iframe found in the metadata\");\r\n            }\r\n        }\r\n        catch (err) {\r\n            // catch to suppress errors since we're in non-promise callback\r\n            logger.error(\"Error from getCheckSessionIframe:\", err instanceof Error ? err.message : err);\r\n        }\r\n    };\r\n\r\n    protected _stop = (): void => {\r\n        const logger = this._logger.create(\"_stop\");\r\n        this._sub = undefined;\r\n\r\n        if (this._checkSessionIFrame) {\r\n            this._checkSessionIFrame.stop();\r\n        }\r\n\r\n        if (this._userManager.settings.monitorAnonymousSession) {\r\n            // using a timer to delay re-initialization to avoid race conditions during signout\r\n            // TODO rewrite to use promise correctly\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            const timerHandle = setInterval(async () => {\r\n                clearInterval(timerHandle);\r\n\r\n                try {\r\n                    const session = await this._userManager.querySessionStatus();\r\n                    if (session) {\r\n                        const tmpUser = {\r\n                            session_state: session.session_state,\r\n                            profile: session.sub ? {\r\n                                sub: session.sub,\r\n                            } : null,\r\n                        };\r\n                        void this._start(tmpUser);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    // catch to suppress errors since we're in a callback\r\n                    logger.error(\"error from querySessionStatus\", err instanceof Error ? err.message : err);\r\n                }\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    protected _callback = async (): Promise<void> => {\r\n        const logger = this._logger.create(\"_callback\");\r\n        try {\r\n            const session = await this._userManager.querySessionStatus();\r\n            let raiseEvent = true;\r\n\r\n            if (session && this._checkSessionIFrame) {\r\n                if (session.sub === this._sub) {\r\n                    raiseEvent = false;\r\n                    this._checkSessionIFrame.start(session.session_state);\r\n\r\n                    logger.debug(\"same sub still logged in at OP, session state has changed, restarting check session iframe; session_state\", session.session_state);\r\n                    await this._userManager.events._raiseUserSessionChanged();\r\n                }\r\n                else {\r\n                    logger.debug(\"different subject signed into OP\", session.sub);\r\n                }\r\n            }\r\n            else {\r\n                logger.debug(\"subject no longer signed into OP\");\r\n            }\r\n\r\n            if (raiseEvent) {\r\n                if (this._sub) {\r\n                    await this._userManager.events._raiseUserSignedOut();\r\n                }\r\n                else {\r\n                    await this._userManager.events._raiseUserSignedIn();\r\n                }\r\n            } else {\r\n                logger.debug(\"no change in session detected, no event to raise\");\r\n            }\r\n        }\r\n        catch (err) {\r\n            if (this._sub) {\r\n                logger.debug(\"Error calling queryCurrentSigninSession; raising signed out event\", err);\r\n                await this._userManager.events._raiseUserSignedOut();\r\n            }\r\n        }\r\n    };\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger, Timer } from \"./utils\";\r\nimport type { IdTokenClaims } from \"./Claims\";\r\n\r\n/**\r\n * Holds claims represented by a combination of the `id_token` and the user info endpoint.\r\n *\r\n * @public\r\n */\r\nexport type UserProfile = IdTokenClaims;\r\n\r\n/**\r\n * @public\r\n */\r\nexport class User {\r\n    /**\r\n     * A JSON Web Token (JWT). Only provided if `openid` scope was requested.\r\n     * The application can access the data decoded by using the `profile` property.\r\n     */\r\n    public id_token?: string;\r\n\r\n    /** The session state value returned from the OIDC provider. */\r\n    public session_state: string | null;\r\n\r\n    /**\r\n     * The requested access token returned from the OIDC provider. The application can use this token to\r\n     * authenticate itself to the secured resource.\r\n     */\r\n    public access_token: string;\r\n\r\n    /**\r\n     * An OAuth 2.0 refresh token. The app can use this token to acquire additional access tokens after the\r\n     * current access token expires. Refresh tokens are long-lived and can be used to maintain access to resources\r\n     * for extended periods of time.\r\n     */\r\n    public refresh_token?: string;\r\n\r\n    /** Typically \"Bearer\" */\r\n    public token_type: string;\r\n\r\n    /** The scopes that the requested access token is valid for. */\r\n    public scope?: string;\r\n\r\n    /** The claims represented by a combination of the `id_token` and the user info endpoint. */\r\n    public profile: UserProfile;\r\n\r\n    /** The expires at returned from the OIDC provider. */\r\n    public expires_at?: number;\r\n\r\n    /** custom state data set during the initial signin request */\r\n    public readonly state: unknown;\r\n    public readonly url_state?: string;\r\n\r\n    public constructor(args: {\r\n        id_token?: string;\r\n        session_state?: string | null;\r\n        access_token: string;\r\n        refresh_token?: string;\r\n        token_type: string;\r\n        scope?: string;\r\n        profile: UserProfile;\r\n        expires_at?: number;\r\n        userState?: unknown;\r\n        url_state?: string;\r\n    }) {\r\n        this.id_token = args.id_token;\r\n        this.session_state = args.session_state ?? null;\r\n        this.access_token = args.access_token;\r\n        this.refresh_token = args.refresh_token;\r\n\r\n        this.token_type = args.token_type;\r\n        this.scope = args.scope;\r\n        this.profile = args.profile;\r\n        this.expires_at = args.expires_at;\r\n        this.state = args.userState;\r\n        this.url_state = args.url_state;\r\n    }\r\n\r\n    /** Computed number of seconds the access token has remaining. */\r\n    public get expires_in(): number | undefined {\r\n        if (this.expires_at === undefined) {\r\n            return undefined;\r\n        }\r\n        return this.expires_at - Timer.getEpochTime();\r\n    }\r\n\r\n    public set expires_in(value: number | undefined) {\r\n        if (value !== undefined) {\r\n            this.expires_at = Math.floor(value) + Timer.getEpochTime();\r\n        }\r\n    }\r\n\r\n    /** Computed value indicating if the access token is expired. */\r\n    public get expired(): boolean | undefined {\r\n        const expires_in = this.expires_in;\r\n        if (expires_in === undefined) {\r\n            return undefined;\r\n        }\r\n        return expires_in <= 0;\r\n    }\r\n\r\n    /** Array representing the parsed values from the `scope`. */\r\n    public get scopes(): string[] {\r\n        return this.scope?.split(\" \") ?? [];\r\n    }\r\n\r\n    public toStorageString(): string {\r\n        new Logger(\"User\").create(\"toStorageString\");\r\n        return JSON.stringify({\r\n            id_token: this.id_token,\r\n            session_state: this.session_state,\r\n            access_token: this.access_token,\r\n            refresh_token: this.refresh_token,\r\n            token_type: this.token_type,\r\n            scope: this.scope,\r\n            profile: this.profile,\r\n            expires_at: this.expires_at,\r\n        });\r\n    }\r\n\r\n    public static fromStorageString(storageString: string): User {\r\n        Logger.createStatic(\"User\", \"fromStorageString\");\r\n        return new User(JSON.parse(storageString));\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Event, Logger, UrlUtils } from \"../utils\";\r\nimport type { IWindow, NavigateParams, NavigateResponse } from \"./IWindow\";\r\n\r\nconst messageSource = \"oidc-client\";\r\n\r\ninterface MessageData {\r\n    source: string;\r\n    url: string;\r\n    keepOpen: boolean;\r\n}\r\n\r\n/**\r\n * Window implementation which resolves via communication from a child window\r\n * via the `Window.postMessage()` interface.\r\n *\r\n * @internal\r\n */\r\nexport abstract class AbstractChildWindow implements IWindow {\r\n    protected abstract readonly _logger: Logger;\r\n    protected readonly _abort = new Event<[reason: Error]>(\"Window navigation aborted\");\r\n    protected readonly _disposeHandlers = new Set<() => void>();\r\n\r\n    protected _window: WindowProxy | null = null;\r\n\r\n    public async navigate(params: NavigateParams): Promise<NavigateResponse> {\r\n        const logger = this._logger.create(\"navigate\");\r\n        if (!this._window) {\r\n            throw new Error(\"Attempted to navigate on a disposed window\");\r\n        }\r\n\r\n        logger.debug(\"setting URL in window\");\r\n        this._window.location.replace(params.url);\r\n\r\n        const { url, keepOpen } = await new Promise<MessageData>((resolve, reject) => {\r\n            const listener = (e: MessageEvent) => {\r\n                const data: MessageData | undefined = e.data;\r\n                const origin = params.scriptOrigin ?? window.location.origin;\r\n                if (e.origin !== origin || data?.source !== messageSource) {\r\n                    // silently discard events not intended for us\r\n                    return;\r\n                }\r\n                try {\r\n                    const state = UrlUtils.readParams(data.url, params.response_mode).get(\"state\");\r\n                    if (!state) {\r\n                        logger.warn(\"no state found in response url\");\r\n                    }\r\n                    if (e.source !== this._window && state !== params.state) {\r\n                        // MessageEvent source is a relatively modern feature, we can't rely on it\r\n                        // so we also inspect the payload for a matching state key as an alternative\r\n                        return;\r\n                    }\r\n                }\r\n                catch {\r\n                    this._dispose();\r\n                    reject(new Error(\"Invalid response from window\"));\r\n                }\r\n                resolve(data);\r\n            };\r\n            window.addEventListener(\"message\", listener, false);\r\n            this._disposeHandlers.add(() => window.removeEventListener(\"message\", listener, false));\r\n            this._disposeHandlers.add(this._abort.addHandler((reason) => {\r\n                this._dispose();\r\n                reject(reason);\r\n            }));\r\n        });\r\n        logger.debug(\"got response from window\");\r\n        this._dispose();\r\n\r\n        if (!keepOpen) {\r\n            this.close();\r\n        }\r\n\r\n        return { url };\r\n    }\r\n\r\n    public abstract close(): void;\r\n\r\n    private _dispose(): void {\r\n        this._logger.create(\"_dispose\");\r\n\r\n        for (const dispose of this._disposeHandlers) {\r\n            dispose();\r\n        }\r\n        this._disposeHandlers.clear();\r\n    }\r\n\r\n    protected static _notifyParent(parent: Window, url: string, keepOpen = false, targetOrigin = window.location.origin): void {\r\n        parent.postMessage({\r\n            source: messageSource,\r\n            url,\r\n            keepOpen,\r\n        } as MessageData, targetOrigin);\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { type OidcClientSettings, OidcClientSettingsStore } from \"./OidcClientSettings\";\r\nimport type { PopupWindowFeatures } from \"./utils/PopupUtils\";\r\nimport { WebStorageStateStore } from \"./WebStorageStateStore\";\r\nimport { InMemoryWebStorage } from \"./InMemoryWebStorage\";\r\n\r\nexport const DefaultPopupWindowFeatures: PopupWindowFeatures = {\r\n    location: false,\r\n    toolbar: false,\r\n    height: 640,\r\n    closePopupWindowAfterInSeconds: -1,\r\n};\r\nexport const DefaultPopupTarget = \"_blank\";\r\nconst DefaultAccessTokenExpiringNotificationTimeInSeconds = 60;\r\nconst DefaultCheckSessionIntervalInSeconds = 2;\r\nexport const DefaultSilentRequestTimeoutInSeconds = 10;\r\n\r\n/**\r\n * The settings used to configure the {@link UserManager}.\r\n *\r\n * @public\r\n */\r\nexport interface UserManagerSettings extends OidcClientSettings {\r\n    /** The URL for the page containing the call to signinPopupCallback to handle the callback from the OIDC/OAuth2 */\r\n    popup_redirect_uri?: string;\r\n    popup_post_logout_redirect_uri?: string;\r\n    /**\r\n     * The features parameter to window.open for the popup signin window. By default, the popup is\r\n     * placed centered in front of the window opener.\r\n     * (default: \\{ location: false, menubar: false, height: 640, closePopupWindowAfterInSeconds: -1 \\})\r\n     */\r\n    popupWindowFeatures?: PopupWindowFeatures;\r\n    /** The target parameter to window.open for the popup signin window (default: \"_blank\") */\r\n    popupWindowTarget?: string;\r\n    /** The methods window.location method used to redirect (default: \"assign\") */\r\n    redirectMethod?: \"replace\" | \"assign\";\r\n    /** The methods target window being redirected (default: \"self\") */\r\n    redirectTarget?: \"top\" | \"self\";\r\n\r\n    /** The target to pass while calling postMessage inside iframe for callback (default: window.location.origin) */\r\n    iframeNotifyParentOrigin?: string;\r\n\r\n    /** The script origin to check during 'message' callback execution while performing silent auth via iframe (default: window.location.origin) */\r\n    iframeScriptOrigin?: string;\r\n\r\n    /** The URL for the page containing the code handling the silent renew */\r\n    silent_redirect_uri?: string;\r\n    /** Number of seconds to wait for the silent renew to return before assuming it has failed or timed out (default: 10) */\r\n    silentRequestTimeoutInSeconds?: number;\r\n    /** Flag to indicate if there should be an automatic attempt to renew the access token prior to its expiration. The automatic renew attempt starts 1 minute before the access token expires (default: true) */\r\n    automaticSilentRenew?: boolean;\r\n    /** Flag to validate user.profile.sub in silent renew calls (default: true) */\r\n    validateSubOnSilentRenew?: boolean;\r\n    /** Flag to control if id_token is included as id_token_hint in silent renew calls (default: false) */\r\n    includeIdTokenInSilentRenew?: boolean;\r\n\r\n    /** Will raise events for when user has performed a signout at the OP (default: false) */\r\n    monitorSession?: boolean;\r\n    monitorAnonymousSession?: boolean;\r\n    /** Interval in seconds to check the user's session (default: 2) */\r\n    checkSessionIntervalInSeconds?: number;\r\n    query_status_response_type?: string;\r\n    stopCheckSessionOnError?: boolean;\r\n\r\n    /**\r\n     * The `token_type_hint`s to pass to the authority server by default (default: [\"access_token\", \"refresh_token\"])\r\n     *\r\n     * Token types will be revoked in the same order as they are given here.\r\n     */\r\n    revokeTokenTypes?: (\"access_token\" | \"refresh_token\")[];\r\n    /** Will invoke the revocation endpoint on signout if there is an access token for the user (default: false) */\r\n    revokeTokensOnSignout?: boolean;\r\n    /** Flag to control if id_token is included as id_token_hint in silent signout calls (default: false) */\r\n    includeIdTokenInSilentSignout?: boolean;\r\n\r\n    /** The number of seconds before an access token is to expire to raise the accessTokenExpiring event (default: 60) */\r\n    accessTokenExpiringNotificationTimeInSeconds?: number;\r\n\r\n    /**\r\n     * Storage object used to persist User for currently authenticated user (default: window.sessionStorage, InMemoryWebStorage iff no window).\r\n     *  E.g. `userStore: new WebStorageStateStore({ store: window.localStorage })`\r\n     */\r\n    userStore?: WebStorageStateStore;\r\n}\r\n\r\n/**\r\n * The settings with defaults applied of the {@link UserManager}.\r\n * @see {@link UserManagerSettings}\r\n *\r\n * @public\r\n */\r\nexport class UserManagerSettingsStore extends OidcClientSettingsStore {\r\n    public readonly popup_redirect_uri: string;\r\n    public readonly popup_post_logout_redirect_uri: string | undefined;\r\n    public readonly popupWindowFeatures: PopupWindowFeatures;\r\n    public readonly popupWindowTarget: string;\r\n    public readonly redirectMethod: \"replace\" | \"assign\";\r\n    public readonly redirectTarget: \"top\" | \"self\";\r\n\r\n    public readonly iframeNotifyParentOrigin: string | undefined;\r\n    public readonly iframeScriptOrigin: string | undefined;\r\n\r\n    public readonly silent_redirect_uri: string;\r\n    public readonly silentRequestTimeoutInSeconds: number;\r\n    public readonly automaticSilentRenew: boolean;\r\n    public readonly validateSubOnSilentRenew: boolean;\r\n    public readonly includeIdTokenInSilentRenew: boolean;\r\n\r\n    public readonly monitorSession: boolean;\r\n    public readonly monitorAnonymousSession: boolean;\r\n    public readonly checkSessionIntervalInSeconds: number;\r\n    public readonly query_status_response_type: string;\r\n    public readonly stopCheckSessionOnError: boolean;\r\n\r\n    public readonly revokeTokenTypes: (\"access_token\" | \"refresh_token\")[];\r\n    public readonly revokeTokensOnSignout: boolean;\r\n    public readonly includeIdTokenInSilentSignout: boolean;\r\n\r\n    public readonly accessTokenExpiringNotificationTimeInSeconds: number;\r\n\r\n    public readonly userStore: WebStorageStateStore;\r\n\r\n    public constructor(args: UserManagerSettings) {\r\n        const {\r\n            popup_redirect_uri = args.redirect_uri,\r\n            popup_post_logout_redirect_uri = args.post_logout_redirect_uri,\r\n            popupWindowFeatures = DefaultPopupWindowFeatures,\r\n            popupWindowTarget = DefaultPopupTarget,\r\n            redirectMethod = \"assign\",\r\n            redirectTarget = \"self\",\r\n\r\n            iframeNotifyParentOrigin = args.iframeNotifyParentOrigin,\r\n            iframeScriptOrigin = args.iframeScriptOrigin,\r\n\r\n            requestTimeoutInSeconds,\r\n            silent_redirect_uri = args.redirect_uri,\r\n            silentRequestTimeoutInSeconds,\r\n            automaticSilentRenew = true,\r\n            validateSubOnSilentRenew = true,\r\n            includeIdTokenInSilentRenew = false,\r\n\r\n            monitorSession = false,\r\n            monitorAnonymousSession = false,\r\n            checkSessionIntervalInSeconds = DefaultCheckSessionIntervalInSeconds,\r\n            query_status_response_type = \"code\",\r\n            stopCheckSessionOnError = true,\r\n\r\n            revokeTokenTypes = [\"access_token\", \"refresh_token\"],\r\n            revokeTokensOnSignout = false,\r\n            includeIdTokenInSilentSignout = false,\r\n\r\n            accessTokenExpiringNotificationTimeInSeconds = DefaultAccessTokenExpiringNotificationTimeInSeconds,\r\n\r\n            userStore,\r\n        } = args;\r\n\r\n        super(args);\r\n\r\n        this.popup_redirect_uri = popup_redirect_uri;\r\n        this.popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;\r\n        this.popupWindowFeatures = popupWindowFeatures;\r\n        this.popupWindowTarget = popupWindowTarget;\r\n        this.redirectMethod = redirectMethod;\r\n        this.redirectTarget = redirectTarget;\r\n\r\n        this.iframeNotifyParentOrigin = iframeNotifyParentOrigin;\r\n        this.iframeScriptOrigin = iframeScriptOrigin;\r\n\r\n        this.silent_redirect_uri = silent_redirect_uri;\r\n        this.silentRequestTimeoutInSeconds = silentRequestTimeoutInSeconds || requestTimeoutInSeconds || DefaultSilentRequestTimeoutInSeconds;\r\n        this.automaticSilentRenew = automaticSilentRenew;\r\n        this.validateSubOnSilentRenew = validateSubOnSilentRenew;\r\n        this.includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;\r\n\r\n        this.monitorSession = monitorSession;\r\n        this.monitorAnonymousSession = monitorAnonymousSession;\r\n        this.checkSessionIntervalInSeconds = checkSessionIntervalInSeconds;\r\n        this.stopCheckSessionOnError = stopCheckSessionOnError;\r\n        this.query_status_response_type = query_status_response_type;\r\n\r\n        this.revokeTokenTypes = revokeTokenTypes;\r\n        this.revokeTokensOnSignout = revokeTokensOnSignout;\r\n        this.includeIdTokenInSilentSignout = includeIdTokenInSilentSignout;\r\n\r\n        this.accessTokenExpiringNotificationTimeInSeconds = accessTokenExpiringNotificationTimeInSeconds;\r\n\r\n        if (userStore) {\r\n            this.userStore = userStore;\r\n        }\r\n        else {\r\n            const store = typeof window !== \"undefined\" ? window.sessionStorage : new InMemoryWebStorage();\r\n            this.userStore = new WebStorageStateStore({ store });\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger } from \"../utils\";\r\nimport { ErrorTimeout } from \"../errors\";\r\nimport type { NavigateParams, NavigateResponse } from \"./IWindow\";\r\nimport { AbstractChildWindow } from \"./AbstractChildWindow\";\r\nimport { DefaultSilentRequestTimeoutInSeconds } from \"../UserManagerSettings\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IFrameWindowParams {\r\n    silentRequestTimeoutInSeconds?: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class IFrameWindow extends AbstractChildWindow {\r\n    protected readonly _logger = new Logger(\"IFrameWindow\");\r\n    private _frame: HTMLIFrameElement | null;\r\n    private _timeoutInSeconds: number;\r\n\r\n    public constructor({\r\n        silentRequestTimeoutInSeconds = DefaultSilentRequestTimeoutInSeconds,\r\n    }: IFrameWindowParams) {\r\n        super();\r\n        this._timeoutInSeconds = silentRequestTimeoutInSeconds;\r\n\r\n        this._frame = IFrameWindow.createHiddenIframe();\r\n        this._window = this._frame.contentWindow;\r\n    }\r\n\r\n    private static createHiddenIframe(): HTMLIFrameElement {\r\n        const iframe = window.document.createElement(\"iframe\");\r\n\r\n        // shotgun approach\r\n        iframe.style.visibility = \"hidden\";\r\n        iframe.style.position = \"fixed\";\r\n        iframe.style.left = \"-1000px\";\r\n        iframe.style.top = \"0\";\r\n        iframe.width = \"0\";\r\n        iframe.height = \"0\";\r\n\r\n        window.document.body.appendChild(iframe);\r\n        return iframe;\r\n    }\r\n\r\n    public async navigate(params: NavigateParams): Promise<NavigateResponse> {\r\n        this._logger.debug(\"navigate: Using timeout of:\", this._timeoutInSeconds);\r\n        const timer = setTimeout(() => void this._abort.raise(new ErrorTimeout(\"IFrame timed out without a response\")), this._timeoutInSeconds * 1000);\r\n        this._disposeHandlers.add(() => clearTimeout(timer));\r\n\r\n        return await super.navigate(params);\r\n    }\r\n\r\n    public close(): void {\r\n        if (this._frame) {\r\n            if (this._frame.parentNode) {\r\n                this._frame.addEventListener(\"load\", (ev) => {\r\n                    const frame = ev.target as HTMLIFrameElement;\r\n                    frame.parentNode?.removeChild(frame);\r\n                    void this._abort.raise(new Error(\"IFrame removed from DOM\"));\r\n                }, true);\r\n                this._frame.contentWindow?.location.replace(\"about:blank\");\r\n            }\r\n            this._frame = null;\r\n        }\r\n        this._window = null;\r\n    }\r\n\r\n    public static notifyParent(url: string, targetOrigin?: string): void {\r\n        return super._notifyParent(window.parent, url, false, targetOrigin);\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger } from \"../utils\";\r\nimport type { UserManagerSettingsStore } from \"../UserManagerSettings\";\r\nimport { IFrameWindow, type IFrameWindowParams } from \"./IFrameWindow\";\r\nimport type { INavigator } from \"./INavigator\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class IFrameNavigator implements INavigator {\r\n    private readonly _logger = new Logger(\"IFrameNavigator\");\r\n\r\n    constructor(private _settings: UserManagerSettingsStore) {}\r\n\r\n    public async prepare({\r\n        silentRequestTimeoutInSeconds = this._settings.silentRequestTimeoutInSeconds,\r\n    }: IFrameWindowParams): Promise<IFrameWindow> {\r\n        return new IFrameWindow({ silentRequestTimeoutInSeconds });\r\n    }\r\n\r\n    public async callback(url: string): Promise<void> {\r\n        this._logger.create(\"callback\");\r\n        IFrameWindow.notifyParent(url, this._settings.iframeNotifyParentOrigin);\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger, PopupUtils, type PopupWindowFeatures } from \"../utils\";\r\nimport { DefaultPopupWindowFeatures, DefaultPopupTarget } from \"../UserManagerSettings\";\r\nimport { AbstractChildWindow } from \"./AbstractChildWindow\";\r\nimport type { NavigateParams, NavigateResponse } from \"./IWindow\";\r\n\r\nconst checkForPopupClosedInterval = 500;\r\nconst second = 1000;\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface PopupWindowParams {\r\n    popupWindowFeatures?: PopupWindowFeatures;\r\n    popupWindowTarget?: string;\r\n    /** An AbortSignal to set request's signal. */\r\n    popupSignal?: AbortSignal | null;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class PopupWindow extends AbstractChildWindow {\r\n    protected readonly _logger = new Logger(\"PopupWindow\");\r\n\r\n    protected _window: WindowProxy | null;\r\n\r\n    public constructor({\r\n        popupWindowTarget = DefaultPopupTarget,\r\n        popupWindowFeatures = {},\r\n        popupSignal,\r\n    }: PopupWindowParams) {\r\n        super();\r\n        const centeredPopup = PopupUtils.center({ ...DefaultPopupWindowFeatures, ...popupWindowFeatures });\r\n        this._window = window.open(undefined, popupWindowTarget, PopupUtils.serialize(centeredPopup));\r\n\r\n        if (popupSignal) {\r\n            popupSignal.addEventListener(\"abort\", () => {\r\n                void this._abort.raise(new Error(popupSignal.reason ?? \"Popup aborted\"));\r\n            });\r\n        }\r\n\r\n        if (popupWindowFeatures.closePopupWindowAfterInSeconds && popupWindowFeatures.closePopupWindowAfterInSeconds > 0) {\r\n            setTimeout(() => {\r\n                if (!this._window || typeof this._window.closed !== \"boolean\" || this._window.closed) {\r\n                    void this._abort.raise(new Error(\"Popup blocked by user\"));\r\n                    return;\r\n                }\r\n\r\n                this.close();\r\n            }, popupWindowFeatures.closePopupWindowAfterInSeconds * second);\r\n        }\r\n    }\r\n\r\n    public async navigate(params: NavigateParams): Promise<NavigateResponse> {\r\n        this._window?.focus();\r\n\r\n        const popupClosedInterval = setInterval(() => {\r\n            if (!this._window || this._window.closed) {\r\n                void this._abort.raise(new Error(\"Popup closed by user\"));\r\n            }\r\n        }, checkForPopupClosedInterval);\r\n        this._disposeHandlers.add(() => clearInterval(popupClosedInterval));\r\n\r\n        return await super.navigate(params);\r\n    }\r\n\r\n    public close(): void {\r\n        if (this._window) {\r\n            if (!this._window.closed) {\r\n                this._window.close();\r\n                void this._abort.raise(new Error(\"Popup closed\"));\r\n            }\r\n        }\r\n        this._window = null;\r\n    }\r\n\r\n    public static notifyOpener(url: string, keepOpen: boolean): void {\r\n        if (!window.opener) {\r\n            throw new Error(\"No window.opener. Can't complete notification.\");\r\n        }\r\n        return super._notifyParent(window.opener, url, keepOpen);\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger } from \"../utils\";\r\nimport { PopupWindow, type PopupWindowParams } from \"./PopupWindow\";\r\nimport type { INavigator } from \"./INavigator\";\r\nimport type { UserManagerSettingsStore } from \"../UserManagerSettings\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class PopupNavigator implements INavigator {\r\n    private readonly _logger = new Logger(\"PopupNavigator\");\r\n\r\n    constructor(private _settings: UserManagerSettingsStore) { }\r\n\r\n    public async prepare({\r\n        popupWindowFeatures = this._settings.popupWindowFeatures,\r\n        popupWindowTarget = this._settings.popupWindowTarget,\r\n        popupSignal,\r\n    }: PopupWindowParams): Promise<PopupWindow> {\r\n        return new PopupWindow({ popupWindowFeatures, popupWindowTarget, popupSignal });\r\n    }\r\n\r\n    public async callback(url: string, { keepOpen = false }): Promise<void> {\r\n        this._logger.create(\"callback\");\r\n\r\n        PopupWindow.notifyOpener(url, keepOpen);\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger } from \"../utils\";\r\nimport type { UserManagerSettingsStore } from \"../UserManagerSettings\";\r\nimport type { INavigator } from \"./INavigator\";\r\nimport type { IWindow } from \"./IWindow\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface RedirectParams {\r\n    redirectMethod?: \"replace\" | \"assign\";\r\n    redirectTarget?: \"top\" | \"self\";\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class RedirectNavigator implements INavigator {\r\n    private readonly _logger = new Logger(\"RedirectNavigator\");\r\n\r\n    constructor(private _settings: UserManagerSettingsStore) {}\r\n\r\n    public async prepare({\r\n        redirectMethod = this._settings.redirectMethod,\r\n        redirectTarget = this._settings.redirectTarget,\r\n    }: RedirectParams): Promise<IWindow> {\r\n        this._logger.create(\"prepare\");\r\n        let targetWindow = window.self as Window;\r\n\r\n        if (redirectTarget === \"top\") {\r\n            targetWindow = window.top ?? window.self;\r\n        }\r\n    \r\n        const redirect = targetWindow.location[redirectMethod].bind(targetWindow.location) as (url: string) => never;\r\n        let abort: (reason: Error) => void;\r\n        return {\r\n            navigate: async (params): Promise<never> => {\r\n                this._logger.create(\"navigate\");\r\n                // We use a promise that never resolves to block the caller\r\n                const promise = new Promise((resolve, reject) => {\r\n                    abort = reject;\r\n                });\r\n                redirect(params.url);\r\n                return await (promise as Promise<never>);\r\n            },\r\n            close: () => {\r\n                this._logger.create(\"close\");\r\n                abort?.(new Error(\"Redirect aborted\"));\r\n                targetWindow.stop();\r\n            },\r\n        };\r\n    }\r\n\r\n    public async callback(): Promise<void> {\r\n        return;\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger, Event } from \"./utils\";\r\nimport { AccessTokenEvents } from \"./AccessTokenEvents\";\r\nimport type { UserManagerSettingsStore } from \"./UserManagerSettings\";\r\nimport type { User } from \"./User\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport type UserLoadedCallback = (user: User) => Promise<void> | void;\r\n/**\r\n * @public\r\n */\r\nexport type UserUnloadedCallback = () => Promise<void> | void;\r\n/**\r\n * @public\r\n */\r\nexport type SilentRenewErrorCallback = (error: Error) => Promise<void> | void;\r\n/**\r\n * @public\r\n */\r\nexport type UserSignedInCallback = () => Promise<void> | void;\r\n/**\r\n * @public\r\n */\r\nexport type UserSignedOutCallback = () => Promise<void> | void;\r\n/**\r\n * @public\r\n */\r\nexport type UserSessionChangedCallback = () => Promise<void> | void;\r\n\r\n/**\r\n * @public\r\n */\r\nexport class UserManagerEvents extends AccessTokenEvents {\r\n    protected readonly _logger = new Logger(\"UserManagerEvents\");\r\n\r\n    private readonly _userLoaded = new Event<[User]>(\"User loaded\");\r\n    private readonly _userUnloaded = new Event<[]>(\"User unloaded\");\r\n    private readonly _silentRenewError = new Event<[Error]>(\"Silent renew error\");\r\n    private readonly _userSignedIn = new Event<[]>(\"User signed in\");\r\n    private readonly _userSignedOut = new Event<[]>(\"User signed out\");\r\n    private readonly _userSessionChanged = new Event<[]>(\"User session changed\");\r\n\r\n    public constructor(settings: UserManagerSettingsStore) {\r\n        super({ expiringNotificationTimeInSeconds: settings.accessTokenExpiringNotificationTimeInSeconds });\r\n    }\r\n\r\n    public async load(user: User, raiseEvent=true): Promise<void> {\r\n        await super.load(user);\r\n        if (raiseEvent) {\r\n            await this._userLoaded.raise(user);\r\n        }\r\n    }\r\n\r\n    public async unload(): Promise<void> {\r\n        await super.unload();\r\n        await this._userUnloaded.raise();\r\n    }\r\n\r\n    /**\r\n     * Add callback: Raised when a user session has been established (or re-established).\r\n     */\r\n    public addUserLoaded(cb: UserLoadedCallback): () => void {\r\n        return this._userLoaded.addHandler(cb);\r\n    }\r\n    /**\r\n     * Remove callback: Raised when a user session has been established (or re-established).\r\n     */\r\n    public removeUserLoaded(cb: UserLoadedCallback): void {\r\n        return this._userLoaded.removeHandler(cb);\r\n    }\r\n\r\n    /**\r\n     * Add callback: Raised when a user session has been terminated.\r\n     */\r\n    public addUserUnloaded(cb: UserUnloadedCallback): () => void {\r\n        return this._userUnloaded.addHandler(cb);\r\n    }\r\n    /**\r\n     * Remove callback: Raised when a user session has been terminated.\r\n     */\r\n    public removeUserUnloaded(cb: UserUnloadedCallback): void {\r\n        return this._userUnloaded.removeHandler(cb);\r\n    }\r\n\r\n    /**\r\n     * Add callback: Raised when the automatic silent renew has failed.\r\n     */\r\n    public addSilentRenewError(cb: SilentRenewErrorCallback): () => void {\r\n        return this._silentRenewError.addHandler(cb);\r\n    }\r\n    /**\r\n     * Remove callback: Raised when the automatic silent renew has failed.\r\n     */\r\n    public removeSilentRenewError(cb: SilentRenewErrorCallback): void {\r\n        return this._silentRenewError.removeHandler(cb);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public async _raiseSilentRenewError(e: Error): Promise<void> {\r\n        await this._silentRenewError.raise(e);\r\n    }\r\n\r\n    /**\r\n     * Add callback: Raised when the user is signed in (when `monitorSession` is set).\r\n     * @see {@link UserManagerSettings.monitorSession}\r\n     */\r\n    public addUserSignedIn(cb: UserSignedInCallback): () => void {\r\n        return this._userSignedIn.addHandler(cb);\r\n    }\r\n    /**\r\n     * Remove callback: Raised when the user is signed in (when `monitorSession` is set).\r\n     */\r\n    public removeUserSignedIn(cb: UserSignedInCallback): void {\r\n        this._userSignedIn.removeHandler(cb);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public async _raiseUserSignedIn(): Promise<void> {\r\n        await this._userSignedIn.raise();\r\n    }\r\n\r\n    /**\r\n     * Add callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).\r\n     * @see {@link UserManagerSettings.monitorSession}\r\n     */\r\n    public addUserSignedOut(cb: UserSignedOutCallback): () => void {\r\n        return this._userSignedOut.addHandler(cb);\r\n    }\r\n    /**\r\n     * Remove callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).\r\n     */\r\n    public removeUserSignedOut(cb: UserSignedOutCallback): void {\r\n        this._userSignedOut.removeHandler(cb);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public async _raiseUserSignedOut(): Promise<void> {\r\n        await this._userSignedOut.raise();\r\n    }\r\n\r\n    /**\r\n     * Add callback: Raised when the user session changed (when `monitorSession` is set).\r\n     * @see {@link UserManagerSettings.monitorSession}\r\n     */\r\n    public addUserSessionChanged(cb: UserSessionChangedCallback): () => void {\r\n        return this._userSessionChanged.addHandler(cb);\r\n    }\r\n    /**\r\n     * Remove callback: Raised when the user session changed (when `monitorSession` is set).\r\n     */\r\n    public removeUserSessionChanged(cb: UserSessionChangedCallback): void {\r\n        this._userSessionChanged.removeHandler(cb);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public async _raiseUserSessionChanged(): Promise<void> {\r\n        await this._userSessionChanged.raise();\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { Logger, Timer } from \"./utils\";\r\nimport { ErrorTimeout } from \"./errors\";\r\nimport type { UserManager } from \"./UserManager\";\r\nimport type { AccessTokenCallback } from \"./AccessTokenEvents\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class SilentRenewService {\r\n    protected _logger = new Logger(\"SilentRenewService\");\r\n    private _isStarted = false;\r\n    private readonly _retryTimer = new Timer(\"Retry Silent Renew\");\r\n\r\n    public constructor(private _userManager: UserManager) {}\r\n\r\n    public async start(): Promise<void> {\r\n        const logger = this._logger.create(\"start\");\r\n        if (!this._isStarted) {\r\n            this._isStarted = true;\r\n            this._userManager.events.addAccessTokenExpiring(this._tokenExpiring);\r\n            this._retryTimer.addHandler(this._tokenExpiring);\r\n\r\n            // this will trigger loading of the user so the expiring events can be initialized\r\n            try {\r\n                await this._userManager.getUser();\r\n                // deliberate nop\r\n            }\r\n            catch (err) {\r\n                // catch to suppress errors since we're in a ctor\r\n                logger.error(\"getUser error\", err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public stop(): void {\r\n        if (this._isStarted) {\r\n            this._retryTimer.cancel();\r\n            this._retryTimer.removeHandler(this._tokenExpiring);\r\n            this._userManager.events.removeAccessTokenExpiring(this._tokenExpiring);\r\n            this._isStarted = false;\r\n        }\r\n    }\r\n\r\n    protected _tokenExpiring: AccessTokenCallback = async () => {\r\n        const logger = this._logger.create(\"_tokenExpiring\");\r\n        try {\r\n            await this._userManager.signinSilent();\r\n            logger.debug(\"silent token renewal successful\");\r\n        }\r\n        catch (err) {\r\n            if (err instanceof ErrorTimeout) {\r\n                // no response from authority server, e.g. IFrame timeout, ...\r\n                logger.warn(\"ErrorTimeout from signinSilent:\", err, \"retry in 5s\");\r\n                this._retryTimer.init(5);\r\n                return;\r\n            }\r\n\r\n            logger.error(\"Error from signinSilent:\", err);\r\n            await this._userManager.events._raiseSilentRenewError(err as Error);\r\n        }\r\n    };\r\n}\r\n", "// Copyright (C) AuthTS Contributors\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport type { UserProfile } from \"./User\";\r\n\r\n/**\r\n * Fake state store implementation necessary for validating refresh token requests.\r\n *\r\n * @public\r\n */\r\nexport class RefreshState {\r\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\r\n    public readonly data?: unknown;\r\n\r\n    public readonly refresh_token: string;\r\n    public readonly id_token?: string;\r\n    public readonly session_state: string | null;\r\n    public readonly scope?: string;\r\n    public readonly profile: UserProfile;\r\n\r\n    constructor(args: {\r\n        refresh_token: string;\r\n        id_token?: string;\r\n        session_state: string | null;\r\n        scope?: string;\r\n        profile: UserProfile;\r\n\r\n        state?: unknown;\r\n    }) {\r\n        this.refresh_token = args.refresh_token;\r\n        this.id_token = args.id_token;\r\n        this.session_state = args.session_state;\r\n        this.scope = args.scope;\r\n        this.profile = args.profile;\r\n\r\n        this.data = args.state;\r\n\r\n    }\r\n}\r\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\r\n\r\nimport { CryptoUtils, Logger } from \"./utils\";\r\nimport { ErrorResponse } from \"./errors\";\r\nimport { type NavigateResponse, type PopupWindowParams, type IWindow, type IFrameWindowParams, type RedirectParams, RedirectNavigator, PopupNavigator, IFrameNavigator, type INavigator } from \"./navigators\";\r\nimport { OidcClient, type CreateSigninRequestArgs, type CreateSignoutRequestArgs, type ProcessResourceOwnerPasswordCredentialsArgs, type UseRefreshTokenArgs } from \"./OidcClient\";\r\nimport { type UserManagerSettings, UserManagerSettingsStore } from \"./UserManagerSettings\";\r\nimport { User } from \"./User\";\r\nimport { UserManagerEvents } from \"./UserManagerEvents\";\r\nimport { SilentRenewService } from \"./SilentRenewService\";\r\nimport { SessionMonitor } from \"./SessionMonitor\";\r\nimport type { SessionStatus } from \"./SessionStatus\";\r\nimport type { SignoutResponse } from \"./SignoutResponse\";\r\nimport type { MetadataService } from \"./MetadataService\";\r\nimport { RefreshState } from \"./RefreshState\";\r\nimport type { SigninResponse } from \"./SigninResponse\";\r\nimport type { ExtraHeader, DPoPSettings } from \"./OidcClientSettings\";\r\nimport { DPoPState } from \"./DPoPStore\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport type ExtraSigninRequestArgs = Pick<CreateSigninRequestArgs, \"nonce\" | \"extraQueryParams\" | \"extraTokenParams\" | \"state\" | \"redirect_uri\" | \"prompt\" | \"acr_values\" | \"login_hint\" | \"scope\" | \"max_age\" | \"ui_locales\" | \"resource\" | \"url_state\">;\r\n/**\r\n * @public\r\n */\r\nexport type ExtraSignoutRequestArgs = Pick<CreateSignoutRequestArgs, \"extraQueryParams\" | \"state\" | \"id_token_hint\" | \"post_logout_redirect_uri\">;\r\n\r\n/**\r\n * @public\r\n */\r\nexport type RevokeTokensTypes = UserManagerSettings[\"revokeTokenTypes\"];\r\n\r\n/**\r\n * @public\r\n */\r\nexport type SigninRedirectArgs = RedirectParams & ExtraSigninRequestArgs;\r\n\r\n/**\r\n * @public\r\n */\r\nexport type SigninPopupArgs = PopupWindowParams & ExtraSigninRequestArgs;\r\n\r\n/**\r\n * @public\r\n */\r\nexport type SigninSilentArgs = IFrameWindowParams & ExtraSigninRequestArgs;\r\n\r\n/**\r\n * @public\r\n */\r\nexport type SigninResourceOwnerCredentialsArgs = ProcessResourceOwnerPasswordCredentialsArgs;\r\n\r\n/**\r\n * @public\r\n */\r\nexport type QuerySessionStatusArgs = IFrameWindowParams & ExtraSigninRequestArgs;\r\n\r\n/**\r\n * @public\r\n */\r\nexport type SignoutRedirectArgs = RedirectParams & ExtraSignoutRequestArgs;\r\n\r\n/**\r\n * @public\r\n */\r\nexport type SignoutPopupArgs = PopupWindowParams & ExtraSignoutRequestArgs;\r\n\r\n/**\r\n * @public\r\n */\r\nexport type SignoutSilentArgs = IFrameWindowParams & ExtraSignoutRequestArgs;\r\n\r\n/**\r\n * Provides a higher level API for signing a user in, signing out, managing the user's claims returned from the identity provider,\r\n * and managing an access token returned from the identity provider (OAuth2/OIDC).\r\n *\r\n * @public\r\n */\r\nexport class UserManager {\r\n    /** Get the settings used to configure the `UserManager`. */\r\n    public readonly settings: UserManagerSettingsStore;\r\n    protected readonly _logger = new Logger(\"UserManager\");\r\n\r\n    protected readonly _client: OidcClient;\r\n    protected readonly _redirectNavigator: INavigator;\r\n    protected readonly _popupNavigator: INavigator;\r\n    protected readonly _iframeNavigator: INavigator;\r\n    protected readonly _events: UserManagerEvents;\r\n    protected readonly _silentRenewService: SilentRenewService;\r\n    protected readonly _sessionMonitor: SessionMonitor | null;\r\n\r\n    public constructor(settings: UserManagerSettings, redirectNavigator?: INavigator, popupNavigator?: INavigator, iframeNavigator?: INavigator) {\r\n        this.settings = new UserManagerSettingsStore(settings);\r\n\r\n        this._client = new OidcClient(settings);\r\n\r\n        this._redirectNavigator = redirectNavigator ?? new RedirectNavigator(this.settings);\r\n        this._popupNavigator = popupNavigator ?? new PopupNavigator(this.settings);\r\n        this._iframeNavigator = iframeNavigator ?? new IFrameNavigator(this.settings);\r\n\r\n        this._events = new UserManagerEvents(this.settings);\r\n        this._silentRenewService = new SilentRenewService(this);\r\n\r\n        // order is important for the following properties; these services depend upon the events.\r\n        if (this.settings.automaticSilentRenew) {\r\n            this.startSilentRenew();\r\n        }\r\n\r\n        this._sessionMonitor = null;\r\n        if (this.settings.monitorSession) {\r\n            this._sessionMonitor = new SessionMonitor(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get object used to register for events raised by the `UserManager`.\r\n     */\r\n    public get events(): UserManagerEvents {\r\n        return this._events;\r\n    }\r\n\r\n    /**\r\n     * Get object used to access the metadata configuration of the identity provider.\r\n     */\r\n    public get metadataService(): MetadataService {\r\n        return this._client.metadataService;\r\n    }\r\n\r\n    /**\r\n     * Load the `User` object for the currently authenticated user.\r\n     *\r\n     * @returns A promise\r\n     */\r\n    public async getUser(): Promise<User | null> {\r\n        const logger = this._logger.create(\"getUser\");\r\n        const user = await this._loadUser();\r\n        if (user) {\r\n            logger.info(\"user loaded\");\r\n            await this._events.load(user, false);\r\n            return user;\r\n        }\r\n\r\n        logger.info(\"user not found in storage\");\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Remove from any storage the currently authenticated user.\r\n     *\r\n     * @returns A promise\r\n     */\r\n    public async removeUser(): Promise<void> {\r\n        const logger = this._logger.create(\"removeUser\");\r\n        await this.storeUser(null);\r\n        logger.info(\"user removed from storage\");\r\n        await this._events.unload();\r\n    }\r\n\r\n    /**\r\n     * Trigger a redirect of the current window to the authorization endpoint.\r\n     *\r\n     * @returns A promise\r\n     *\r\n     * @throws `Error` In cases of wrong authentication.\r\n     */\r\n    public async signinRedirect(args: SigninRedirectArgs = {}): Promise<void> {\r\n        this._logger.create(\"signinRedirect\");\r\n        const {\r\n            redirectMethod,\r\n            ...requestArgs\r\n        } = args;\r\n\r\n        let dpopJkt: string | undefined;\r\n        if (this.settings.dpop?.bind_authorization_code) {\r\n            dpopJkt = await this.generateDPoPJkt(this.settings.dpop);\r\n        }\r\n\r\n        const handle = await this._redirectNavigator.prepare({ redirectMethod });\r\n        await this._signinStart({\r\n            request_type: \"si:r\",\r\n            dpopJkt,\r\n            ...requestArgs,\r\n        }, handle);\r\n    }\r\n\r\n    /**\r\n     * Process the response (callback) from the authorization endpoint.\r\n     * It is recommended to use {@link UserManager.signinCallback} instead.\r\n     *\r\n     * @returns A promise containing the authenticated `User`.\r\n     *\r\n     * @see {@link UserManager.signinCallback}\r\n     */\r\n    public async signinRedirectCallback(url = window.location.href): Promise<User> {\r\n        const logger = this._logger.create(\"signinRedirectCallback\");\r\n        const user = await this._signinEnd(url);\r\n        if (user.profile && user.profile.sub) {\r\n            logger.info(\"success, signed in subject\", user.profile.sub);\r\n        }\r\n        else {\r\n            logger.info(\"no subject\");\r\n        }\r\n\r\n        return user;\r\n    }\r\n\r\n    /**\r\n     * Trigger the signin with user/password.\r\n     *\r\n     * @returns A promise containing the authenticated `User`.\r\n     * @throws {@link ErrorResponse} In cases of wrong authentication.\r\n     */\r\n    public async signinResourceOwnerCredentials({\r\n        username,\r\n        password,\r\n        skipUserInfo = false,\r\n    }: SigninResourceOwnerCredentialsArgs): Promise<User> {\r\n        const logger = this._logger.create(\"signinResourceOwnerCredential\");\r\n\r\n        const signinResponse = await this._client.processResourceOwnerPasswordCredentials({\r\n            username,\r\n            password,\r\n            skipUserInfo,\r\n            extraTokenParams: this.settings.extraTokenParams,\r\n        });\r\n        logger.debug(\"got signin response\");\r\n\r\n        const user = await this._buildUser(signinResponse);\r\n        if (user.profile && user.profile.sub) {\r\n            logger.info(\"success, signed in subject\", user.profile.sub);\r\n        } else {\r\n            logger.info(\"no subject\");\r\n        }\r\n        return user;\r\n    }\r\n\r\n    /**\r\n     * Trigger a request (via a popup window) to the authorization endpoint.\r\n     *\r\n     * @returns A promise containing the authenticated `User`.\r\n     * @throws `Error` In cases of wrong authentication.\r\n     */\r\n    public async signinPopup(args: SigninPopupArgs = {}): Promise<User> {\r\n        const logger = this._logger.create(\"signinPopup\");\r\n\r\n        let dpopJkt: string | undefined;\r\n        if (this.settings.dpop?.bind_authorization_code) {\r\n            dpopJkt = await this.generateDPoPJkt(this.settings.dpop);\r\n        }\r\n\r\n        const {\r\n            popupWindowFeatures,\r\n            popupWindowTarget,\r\n            popupSignal,\r\n            ...requestArgs\r\n        } = args;\r\n        const url = this.settings.popup_redirect_uri;\r\n        if (!url) {\r\n            logger.throw(new Error(\"No popup_redirect_uri configured\"));\r\n        }\r\n\r\n        const handle = await this._popupNavigator.prepare({ popupWindowFeatures, popupWindowTarget, popupSignal });\r\n        const user = await this._signin({\r\n            request_type: \"si:p\",\r\n            redirect_uri: url,\r\n            display: \"popup\",\r\n            dpopJkt,\r\n            ...requestArgs,\r\n        }, handle);\r\n        if (user) {\r\n            if (user.profile && user.profile.sub) {\r\n                logger.info(\"success, signed in subject\", user.profile.sub);\r\n            } else {\r\n                logger.info(\"no subject\");\r\n            }\r\n        }\r\n\r\n        return user;\r\n    }\r\n\r\n    /**\r\n     * Notify the opening window of response (callback) from the authorization endpoint.\r\n     * It is recommended to use {@link UserManager.signinCallback} instead.\r\n     *\r\n     * @returns A promise\r\n     *\r\n     * @see {@link UserManager.signinCallback}\r\n     */\r\n    public async signinPopupCallback(url = window.location.href, keepOpen = false): Promise<void> {\r\n        const logger = this._logger.create(\"signinPopupCallback\");\r\n        await this._popupNavigator.callback(url, { keepOpen });\r\n        logger.info(\"success\");\r\n    }\r\n\r\n    /**\r\n     * Trigger a silent request (via refresh token or an iframe) to the authorization endpoint.\r\n     *\r\n     * @returns A promise that contains the authenticated `User`.\r\n     */\r\n    public async signinSilent(args: SigninSilentArgs = {}): Promise<User | null> {\r\n        const logger = this._logger.create(\"signinSilent\");\r\n        const {\r\n            silentRequestTimeoutInSeconds,\r\n            ...requestArgs\r\n        } = args;\r\n        // first determine if we have a refresh token, or need to use iframe\r\n        let user = await this._loadUser();\r\n        if (user?.refresh_token) {\r\n            logger.debug(\"using refresh token\");\r\n            const state = new RefreshState(user as Required<User>);\r\n            return await this._useRefreshToken({\r\n                state,\r\n                redirect_uri: requestArgs.redirect_uri,\r\n                resource: requestArgs.resource,\r\n                extraTokenParams: requestArgs.extraTokenParams,\r\n                timeoutInSeconds: silentRequestTimeoutInSeconds,\r\n            });\r\n        }\r\n\r\n        let dpopJkt: string | undefined;\r\n        if (this.settings.dpop?.bind_authorization_code) {\r\n            dpopJkt = await this.generateDPoPJkt(this.settings.dpop);\r\n        }\r\n\r\n        const url = this.settings.silent_redirect_uri;\r\n        if (!url) {\r\n            logger.throw(new Error(\"No silent_redirect_uri configured\"));\r\n        }\r\n\r\n        let verifySub: string | undefined;\r\n        if (user && this.settings.validateSubOnSilentRenew) {\r\n            logger.debug(\"subject prior to silent renew:\", user.profile.sub);\r\n            verifySub = user.profile.sub;\r\n        }\r\n\r\n        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\r\n        user = await this._signin({\r\n            request_type: \"si:s\",\r\n            redirect_uri: url,\r\n            prompt: \"none\",\r\n            id_token_hint: this.settings.includeIdTokenInSilentRenew ? user?.id_token : undefined,\r\n            dpopJkt,\r\n            ...requestArgs,\r\n        }, handle, verifySub);\r\n        if (user) {\r\n            if (user.profile?.sub) {\r\n                logger.info(\"success, signed in subject\", user.profile.sub);\r\n            }\r\n            else {\r\n                logger.info(\"no subject\");\r\n            }\r\n        }\r\n\r\n        return user;\r\n    }\r\n\r\n    protected async _useRefreshToken(args: UseRefreshTokenArgs): Promise<User> {\r\n        const response = await this._client.useRefreshToken({\r\n            timeoutInSeconds: this.settings.silentRequestTimeoutInSeconds,\r\n            ...args,\r\n        });\r\n        const user = new User({ ...args.state, ...response });\r\n\r\n        await this.storeUser(user);\r\n        await this._events.load(user);\r\n        return user;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Notify the parent window of response (callback) from the authorization endpoint.\r\n     * It is recommended to use {@link UserManager.signinCallback} instead.\r\n     *\r\n     * @returns A promise\r\n     *\r\n     * @see {@link UserManager.signinCallback}\r\n     */\r\n    public async signinSilentCallback(url = window.location.href): Promise<void> {\r\n        const logger = this._logger.create(\"signinSilentCallback\");\r\n        await this._iframeNavigator.callback(url);\r\n        logger.info(\"success\");\r\n    }\r\n\r\n    /**\r\n     * Process any response (callback) from the authorization endpoint, by dispatching the request_type\r\n     * and executing one of the following functions:\r\n     * - {@link UserManager.signinRedirectCallback}\r\n     * - {@link UserManager.signinPopupCallback}\r\n     * - {@link UserManager.signinSilentCallback}\r\n     *\r\n     * @throws `Error` If request_type is unknown or signin cannot be processed.\r\n     */\r\n    public async signinCallback(url = window.location.href): Promise<User | undefined> {\r\n        const { state } = await this._client.readSigninResponseState(url);\r\n        switch (state.request_type) {\r\n            case \"si:r\":\r\n                return await this.signinRedirectCallback(url);\r\n            case \"si:p\":\r\n                await this.signinPopupCallback(url);\r\n                break;\r\n            case \"si:s\":\r\n                await this.signinSilentCallback(url);\r\n                break;\r\n            default:\r\n                throw new Error(\"invalid response_type in state\");\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Process any response (callback) from the end session endpoint, by dispatching the request_type\r\n     * and executing one of the following functions:\r\n     * - {@link UserManager.signoutRedirectCallback}\r\n     * - {@link UserManager.signoutPopupCallback}\r\n     * - {@link UserManager.signoutSilentCallback}\r\n     *\r\n     * @throws `Error` If request_type is unknown or signout cannot be processed.\r\n     */\r\n    public async signoutCallback(url = window.location.href, keepOpen = false): Promise<SignoutResponse | undefined> {\r\n        const { state } = await this._client.readSignoutResponseState(url);\r\n        if (!state) {\r\n            return undefined;\r\n        }\r\n\r\n        switch (state.request_type) {\r\n            case \"so:r\":\r\n                return await this.signoutRedirectCallback(url);\r\n            case \"so:p\":\r\n                await this.signoutPopupCallback(url, keepOpen);\r\n                break;\r\n            case \"so:s\":\r\n                await this.signoutSilentCallback(url);\r\n                break;\r\n            default:\r\n                throw new Error(\"invalid response_type in state\");\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Query OP for user's current signin status.\r\n     *\r\n     * @returns A promise object with session_state and subject identifier.\r\n     */\r\n    public async querySessionStatus(args: QuerySessionStatusArgs = {}): Promise<SessionStatus | null> {\r\n        const logger = this._logger.create(\"querySessionStatus\");\r\n        const {\r\n            silentRequestTimeoutInSeconds,\r\n            ...requestArgs\r\n        } = args;\r\n        const url = this.settings.silent_redirect_uri;\r\n        if (!url) {\r\n            logger.throw(new Error(\"No silent_redirect_uri configured\"));\r\n        }\r\n\r\n        const user = await this._loadUser();\r\n        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\r\n        const navResponse = await this._signinStart({\r\n            request_type: \"si:s\", // this acts like a signin silent\r\n            redirect_uri: url,\r\n            prompt: \"none\",\r\n            id_token_hint: this.settings.includeIdTokenInSilentRenew ? user?.id_token : undefined,\r\n            response_type: this.settings.query_status_response_type,\r\n            scope: \"openid\",\r\n            skipUserInfo: true,\r\n            ...requestArgs,\r\n        }, handle);\r\n        try {\r\n            const extraHeaders: Record<string, ExtraHeader> = {};\r\n            const signinResponse = await this._client.processSigninResponse(navResponse.url, extraHeaders);\r\n            logger.debug(\"got signin response\");\r\n\r\n            if (signinResponse.session_state && signinResponse.profile.sub) {\r\n                logger.info(\"success for subject\", signinResponse.profile.sub);\r\n                return {\r\n                    session_state: signinResponse.session_state,\r\n                    sub: signinResponse.profile.sub,\r\n                };\r\n            }\r\n\r\n            logger.info(\"success, user not authenticated\");\r\n            return null;\r\n        } catch (err) {\r\n            if (this.settings.monitorAnonymousSession && err instanceof ErrorResponse) {\r\n                switch (err.error) {\r\n                    case \"login_required\":\r\n                    case \"consent_required\":\r\n                    case \"interaction_required\":\r\n                    case \"account_selection_required\":\r\n                        logger.info(\"success for anonymous user\");\r\n                        return {\r\n                            session_state: err.session_state!,\r\n                        };\r\n                }\r\n            }\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    protected async _signin(args: CreateSigninRequestArgs, handle: IWindow, verifySub?: string): Promise<User> {\r\n        const navResponse = await this._signinStart(args, handle);\r\n        return await this._signinEnd(navResponse.url, verifySub);\r\n    }\r\n\r\n    protected async _signinStart(args: CreateSigninRequestArgs, handle: IWindow): Promise<NavigateResponse> {\r\n        const logger = this._logger.create(\"_signinStart\");\r\n\r\n        try {\r\n            const signinRequest = await this._client.createSigninRequest(args);\r\n            logger.debug(\"got signin request\");\r\n\r\n            return await handle.navigate({\r\n                url: signinRequest.url,\r\n                state: signinRequest.state.id,\r\n                response_mode: signinRequest.state.response_mode,\r\n                scriptOrigin: this.settings.iframeScriptOrigin,\r\n            });\r\n        } catch (err) {\r\n            logger.debug(\"error after preparing navigator, closing navigator window\");\r\n            handle.close();\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    protected async _signinEnd(url: string, verifySub?: string): Promise<User> {\r\n        const logger = this._logger.create(\"_signinEnd\");\r\n        const extraHeaders: Record<string, ExtraHeader> = {};\r\n        const signinResponse = await this._client.processSigninResponse(url, extraHeaders);\r\n        logger.debug(\"got signin response\");\r\n\r\n        const user = await this._buildUser(signinResponse, verifySub);\r\n        return user;\r\n    }\r\n\r\n    protected async _buildUser(signinResponse: SigninResponse, verifySub?: string) {\r\n        const logger = this._logger.create(\"_buildUser\");\r\n        const user = new User(signinResponse);\r\n        if (verifySub) {\r\n            if (verifySub !== user.profile.sub) {\r\n                logger.debug(\"current user does not match user returned from signin. sub from signin:\", user.profile.sub);\r\n                throw new ErrorResponse({ ...signinResponse, error: \"login_required\" });\r\n            }\r\n            logger.debug(\"current user matches user returned from signin\");\r\n        }\r\n\r\n        await this.storeUser(user);\r\n        logger.debug(\"user stored\");\r\n        await this._events.load(user);\r\n\r\n        return user;\r\n    }\r\n\r\n    /**\r\n     * Trigger a redirect of the current window to the end session endpoint.\r\n     *\r\n     * @returns A promise\r\n     */\r\n    public async signoutRedirect(args: SignoutRedirectArgs = {}): Promise<void> {\r\n        const logger = this._logger.create(\"signoutRedirect\");\r\n        const {\r\n            redirectMethod,\r\n            ...requestArgs\r\n        } = args;\r\n        const handle = await this._redirectNavigator.prepare({ redirectMethod });\r\n        await this._signoutStart({\r\n            request_type: \"so:r\",\r\n            post_logout_redirect_uri: this.settings.post_logout_redirect_uri,\r\n            ...requestArgs,\r\n        }, handle);\r\n        logger.info(\"success\");\r\n    }\r\n\r\n    /**\r\n     * Process response (callback) from the end session endpoint.\r\n     * It is recommended to use {@link UserManager.signoutCallback} instead.\r\n     *\r\n     * @returns A promise containing signout response\r\n     *\r\n     * @see {@link UserManager.signoutCallback}\r\n     */\r\n    public async signoutRedirectCallback(url = window.location.href): Promise<SignoutResponse> {\r\n        const logger = this._logger.create(\"signoutRedirectCallback\");\r\n        const response = await this._signoutEnd(url);\r\n        logger.info(\"success\");\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Trigger a redirect of a popup window to the end session endpoint.\r\n     *\r\n     * @returns A promise\r\n     */\r\n    public async signoutPopup(args: SignoutPopupArgs = {}): Promise<void> {\r\n        const logger = this._logger.create(\"signoutPopup\");\r\n        const {\r\n            popupWindowFeatures,\r\n            popupWindowTarget,\r\n            popupSignal,\r\n            ...requestArgs\r\n        } = args;\r\n        const url = this.settings.popup_post_logout_redirect_uri;\r\n\r\n        const handle = await this._popupNavigator.prepare({ popupWindowFeatures, popupWindowTarget, popupSignal });\r\n        await this._signout({\r\n            request_type: \"so:p\",\r\n            post_logout_redirect_uri: url,\r\n            // we're putting a dummy entry in here because we\r\n            // need a unique id from the state for notification\r\n            // to the parent window, which is necessary if we\r\n            // plan to return back to the client after signout\r\n            // and so we can close the popup after signout\r\n            state: url == null ? undefined : {},\r\n            ...requestArgs,\r\n        }, handle);\r\n        logger.info(\"success\");\r\n    }\r\n\r\n    /**\r\n     * Process response (callback) from the end session endpoint from a popup window.\r\n     * It is recommended to use {@link UserManager.signoutCallback} instead.\r\n     *\r\n     * @returns A promise\r\n     *\r\n     * @see {@link UserManager.signoutCallback}\r\n     */\r\n    public async signoutPopupCallback(url = window.location.href, keepOpen = false): Promise<void> {\r\n        const logger = this._logger.create(\"signoutPopupCallback\");\r\n        await this._popupNavigator.callback(url, { keepOpen });\r\n        logger.info(\"success\");\r\n    }\r\n\r\n    protected async _signout(args: CreateSignoutRequestArgs, handle: IWindow): Promise<SignoutResponse> {\r\n        const navResponse = await this._signoutStart(args, handle);\r\n        return await this._signoutEnd(navResponse.url);\r\n    }\r\n\r\n    protected async _signoutStart(args: CreateSignoutRequestArgs = {}, handle: IWindow): Promise<NavigateResponse> {\r\n        const logger = this._logger.create(\"_signoutStart\");\r\n\r\n        try {\r\n            const user = await this._loadUser();\r\n            logger.debug(\"loaded current user from storage\");\r\n\r\n            if (this.settings.revokeTokensOnSignout) {\r\n                await this._revokeInternal(user);\r\n            }\r\n\r\n            const id_token = args.id_token_hint || user && user.id_token;\r\n            if (id_token) {\r\n                logger.debug(\"setting id_token_hint in signout request\");\r\n                args.id_token_hint = id_token;\r\n            }\r\n\r\n            await this.removeUser();\r\n            logger.debug(\"user removed, creating signout request\");\r\n\r\n            const signoutRequest = await this._client.createSignoutRequest(args);\r\n            logger.debug(\"got signout request\");\r\n\r\n            return await handle.navigate({\r\n                url: signoutRequest.url,\r\n                state: signoutRequest.state?.id,\r\n                scriptOrigin: this.settings.iframeScriptOrigin,\r\n            });\r\n        } catch (err) {\r\n            logger.debug(\"error after preparing navigator, closing navigator window\");\r\n            handle.close();\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    protected async _signoutEnd(url: string): Promise<SignoutResponse> {\r\n        const logger = this._logger.create(\"_signoutEnd\");\r\n        const signoutResponse = await this._client.processSignoutResponse(url);\r\n        logger.debug(\"got signout response\");\r\n\r\n        return signoutResponse;\r\n    }\r\n\r\n    /**\r\n     * Trigger a silent request (via an iframe) to the end session endpoint.\r\n     *\r\n     * @returns A promise\r\n     */\r\n    public async signoutSilent(args: SignoutSilentArgs = {}): Promise<void> {\r\n        const logger = this._logger.create(\"signoutSilent\");\r\n        const {\r\n            silentRequestTimeoutInSeconds,\r\n            ...requestArgs\r\n        } = args;\r\n\r\n        const id_token_hint = this.settings.includeIdTokenInSilentSignout\r\n            ? (await this._loadUser())?.id_token\r\n            : undefined;\r\n\r\n        const url = this.settings.popup_post_logout_redirect_uri;\r\n        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\r\n        await this._signout({\r\n            request_type: \"so:s\",\r\n            post_logout_redirect_uri: url,\r\n            id_token_hint: id_token_hint,\r\n            ...requestArgs,\r\n        }, handle);\r\n\r\n        logger.info(\"success\");\r\n    }\r\n\r\n    /**\r\n     * Notify the parent window of response (callback) from the end session endpoint.\r\n     * It is recommended to use {@link UserManager.signoutCallback} instead.\r\n     *\r\n     * @returns A promise\r\n     *\r\n     * @see {@link UserManager.signoutCallback}\r\n     */\r\n    public async signoutSilentCallback(url = window.location.href): Promise<void> {\r\n        const logger = this._logger.create(\"signoutSilentCallback\");\r\n        await this._iframeNavigator.callback(url);\r\n        logger.info(\"success\");\r\n    }\r\n\r\n    public async revokeTokens(types?: RevokeTokensTypes): Promise<void> {\r\n        const user = await this._loadUser();\r\n        await this._revokeInternal(user, types);\r\n    }\r\n\r\n    protected async _revokeInternal(user: User | null, types = this.settings.revokeTokenTypes): Promise<void> {\r\n        const logger = this._logger.create(\"_revokeInternal\");\r\n        if (!user) return;\r\n\r\n        const typesPresent = types.filter(type => typeof user[type] === \"string\");\r\n\r\n        if (!typesPresent.length) {\r\n            logger.debug(\"no need to revoke due to no token(s)\");\r\n            return;\r\n        }\r\n\r\n        // don't Promise.all, order matters\r\n        for (const type of typesPresent) {\r\n            await this._client.revokeToken(\r\n                user[type]!,  \r\n                type,\r\n            );\r\n            logger.info(`${type} revoked successfully`);\r\n            if (type !== \"access_token\") {\r\n                user[type] = null as never;\r\n            }\r\n        }\r\n\r\n        await this.storeUser(user);\r\n        logger.debug(\"user stored\");\r\n        await this._events.load(user);\r\n    }\r\n\r\n    /**\r\n     * Enables silent renew for the `UserManager`.\r\n     */\r\n    public startSilentRenew(): void {\r\n        this._logger.create(\"startSilentRenew\");\r\n        void this._silentRenewService.start();\r\n    }\r\n\r\n    /**\r\n     * Disables silent renew for the `UserManager`.\r\n     */\r\n    public stopSilentRenew(): void {\r\n        this._silentRenewService.stop();\r\n    }\r\n\r\n    protected get _userStoreKey(): string {\r\n        return `user:${this.settings.authority}:${this.settings.client_id}`;\r\n    }\r\n\r\n    protected async _loadUser(): Promise<User | null> {\r\n        const logger = this._logger.create(\"_loadUser\");\r\n        const storageString = await this.settings.userStore.get(this._userStoreKey);\r\n        if (storageString) {\r\n            logger.debug(\"user storageString loaded\");\r\n            return User.fromStorageString(storageString);\r\n        }\r\n\r\n        logger.debug(\"no user storageString\");\r\n        return null;\r\n    }\r\n\r\n    public async storeUser(user: User | null): Promise<void> {\r\n        const logger = this._logger.create(\"storeUser\");\r\n        if (user) {\r\n            logger.debug(\"storing user\");\r\n            const storageString = user.toStorageString();\r\n            await this.settings.userStore.set(this._userStoreKey, storageString);\r\n        } else {\r\n            this._logger.debug(\"removing user\");\r\n            await this.settings.userStore.remove(this._userStoreKey);\r\n            if (this.settings.dpop) {\r\n                await this.settings.dpop.store.remove(this.settings.client_id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes stale state entries in storage for incomplete authorize requests.\r\n     */\r\n    public async clearStaleState(): Promise<void> {\r\n        await this._client.clearStaleState();\r\n    }\r\n\r\n    /**\r\n     * Dynamically generates a DPoP proof for a given user, URL and optional Http method.\r\n     * This method is useful when you need to make a request to a resource server\r\n     * with fetch or similar, and you need to include a DPoP proof in a DPoP header.\r\n     * @param url - The URL to generate the DPoP proof for\r\n     * @param user - The user to generate the DPoP proof for\r\n     * @param httpMethod - Optional, defaults to \"GET\"\r\n     * @param nonce - Optional nonce provided by the resource server\r\n     *\r\n     * @returns A promise containing the DPoP proof or undefined if DPoP is not enabled/no user is found.\r\n     */\r\n    public async dpopProof(url: string, user: User, httpMethod?: string, nonce?: string): Promise<string | undefined> {\r\n        const dpopState = await this.settings.dpop?.store?.get(this.settings.client_id);\r\n        if (dpopState) {\r\n            return await CryptoUtils.generateDPoPProof({\r\n                url,\r\n                accessToken: user?.access_token,\r\n                httpMethod: httpMethod,\r\n                keyPair: dpopState.keys,\r\n                nonce,\r\n            });\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    async generateDPoPJkt(dpopSettings: DPoPSettings): Promise<string | undefined> {\r\n        let dpopState = await dpopSettings.store.get(this.settings.client_id);\r\n        if (!dpopState) {\r\n            const dpopKeys = await CryptoUtils.generateDPoPKeys();\r\n            dpopState = new DPoPState(dpopKeys);\r\n            await dpopSettings.store.set(this.settings.client_id, dpopState);\r\n        }\r\n        return await CryptoUtils.generateDPoPJkt(dpopState.keys);\r\n    }\r\n}\r\n", "{\r\n  \"name\": \"oidc-client-ts\",\r\n  \"version\": \"3.1.0\",\r\n  \"description\": \"OpenID Connect (OIDC) & OAuth2 client library - copy\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/dmitriynazaratiy/oidc-client-ts.git\"\r\n  },\r\n  \"homepage\": \"https://github.com/dmitriynazaratiy/oidc-client-ts#readme\",\r\n  \"license\": \"Apache-2.0\",\r\n  \"main\": \"dist/umd/oidc-client-ts.js\",\r\n  \"types\": \"dist/types/oidc-client-ts.d.ts\",\r\n  \"exports\": {\r\n    \".\": {\r\n      \"types\": \"./dist/types/oidc-client-ts.d.ts\",\r\n      \"import\": \"./dist/esm/oidc-client-ts.js\",\r\n      \"require\": \"./dist/umd/oidc-client-ts.js\"\r\n    },\r\n    \"./package.json\": \"./package.json\"\r\n  },\r\n  \"files\": [\r\n    \"dist\"\r\n  ],\r\n  \"keywords\": [\r\n    \"authentication\",\r\n    \"oauth2\",\r\n    \"oidc\",\r\n    \"openid\",\r\n    \"OpenID Connect\"\r\n  ],\r\n  \"scripts\": {\r\n    \"build\": \"node scripts/build.js && npm run build-types\",\r\n    \"build-types\": \"tsc -p tsconfig.build.json && api-extractor run\",\r\n    \"clean\": \"git clean -fdX dist lib *.tsbuildinfo\",\r\n    \"prepack\": \"npm run build\",\r\n    \"test\": \"tsc && jest\",\r\n    \"typedoc\": \"typedoc\",\r\n    \"lint\": \"eslint --max-warnings=0 --cache .\",\r\n    \"prepare\": \"husky\"\r\n  },\r\n  \"dependencies\": {\r\n    \"jwt-decode\": \"^4.0.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@eslint/eslintrc\": \"^3.2.0\",\r\n    \"@eslint/js\": \"^9.18.0\",\r\n    \"@microsoft/api-extractor\": \"^7.49.1\",\r\n    \"@stylistic/eslint-plugin\": \"^2.13.0\",\r\n    \"@testing-library/jest-dom\": \"^6.6.3\",\r\n    \"@types/jest\": \"^29.5.14\",\r\n    \"@types/node\": \"^22.10.1\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^8.20.0\",\r\n    \"@typescript-eslint/parser\": \"^8.20.0\",\r\n    \"esbuild\": \"^0.24.0\",\r\n    \"eslint\": \"^9.18.0\",\r\n    \"eslint-plugin-testing-library\": \"^7.1.1\",\r\n    \"fake-indexeddb\": \"^6.0.0\",\r\n    \"globals\": \"^15.14.0\",\r\n    \"http-proxy-middleware\": \"^3.0.3\",\r\n    \"husky\": \"^9.1.7\",\r\n    \"jest\": \"^29.7.0\",\r\n    \"jest-environment-jsdom\": \"^29.7.0\",\r\n    \"jest-mock\": \"^29.7.0\",\r\n    \"jose\": \"^5.9.6\",\r\n    \"lint-staged\": \"^15.2.10\",\r\n    \"ts-jest\": \"^29.2.5\",\r\n    \"typedoc\": \"^0.27.4\",\r\n    \"typescript\": \"~5.7.2\",\r\n    \"yn\": \"^5.0.0\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=18\"\r\n  },\r\n  \"lint-staged\": {\r\n    \"*.{js,jsx,ts,tsx}\": \"eslint --cache --fix\"\r\n  }\r\n}\r\n", "// @ts-expect-error avoid enabling resolveJsonModule to keep build process simple\r\nimport { version } from \"../package.json\";\r\n\r\n/**\r\n * @public\r\n */\r\nexport const Version: string = version;\r\n", "import { DPoPState, type DPoPStore } from \"./DPoPStore\";\r\n\r\n/**\r\n * Provides a default implementation of the DPoP store using IndexedDB.\r\n *\r\n * @public\r\n */\r\nexport class IndexedDbDPoPStore implements DPoPStore {\r\n    readonly _dbName: string = \"oidc\";\r\n    readonly _storeName: string = \"dpop\";\r\n\r\n    public async set(key: string, value: DPoPState): Promise<void> {\r\n        const store = await this.createStore(this._dbName, this._storeName);\r\n        await store(\"readwrite\", (str: IDBObjectStore) => {\r\n            str.put(value, key);\r\n            return this.promisifyRequest(str.transaction);\r\n        });\r\n    }\r\n\r\n    public async get(key: string): Promise<DPoPState> {\r\n        const store = await this.createStore(this._dbName, this._storeName);\r\n        return await store(\"readonly\", (str) => {\r\n            return this.promisifyRequest(str.get(key));\r\n        }) as DPoPState;\r\n    }\r\n\r\n    public async remove(key: string): Promise<DPoPState> {\r\n        const item = await this.get(key);\r\n        const store = await this.createStore(this._dbName, this._storeName);\r\n        await store(\"readwrite\", (str) => {\r\n            return this.promisifyRequest(str.delete(key));\r\n        });\r\n        return item;\r\n    }\r\n\r\n    public async getAllKeys(): Promise<string[]> {\r\n        const store = await this.createStore(this._dbName, this._storeName);\r\n        return await store(\"readonly\", (str) => {\r\n            return this.promisifyRequest(str.getAllKeys());\r\n        }) as string[];\r\n    }\r\n\r\n    promisifyRequest<T = undefined>(\r\n        request: IDBRequest<T> | IDBTransaction): Promise<T> {\r\n        return new Promise<T>((resolve, reject) => {\r\n            (request as IDBTransaction).oncomplete = (request as IDBRequest<T>).onsuccess = () => resolve((request as IDBRequest<T>).result);\r\n            (request as IDBTransaction).onabort = (request as IDBRequest<T>).onerror = () => reject((request as IDBRequest<T>).error as Error);\r\n        });\r\n    }\r\n\r\n    async createStore<T>(\r\n        dbName: string,\r\n        storeName: string,\r\n    ): Promise<(txMode: IDBTransactionMode, callback: (store: IDBObjectStore) => T | PromiseLike<T>) => Promise<T>> {\r\n        const request = indexedDB.open(dbName);\r\n        request.onupgradeneeded = () => request.result.createObjectStore(storeName);\r\n        const db = await this.promisifyRequest<IDBDatabase>(request);\r\n\r\n        return async (\r\n            txMode: IDBTransactionMode,\r\n            callback: (store: IDBObjectStore) => T | PromiseLike<T>,\r\n        ) => {\r\n            const tx = db.transaction(storeName, txMode);\r\n            const store = tx.objectStore(storeName);\r\n            return await callback(store);\r\n        };\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["Log", "logger", "logger", "logger", "logger", "logger", "logger", "logger", "logger", "logger", "logger", "logger", "_a", "logger", "logger"]
}
